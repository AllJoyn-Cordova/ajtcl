/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.4
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x032873
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

static void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
static V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

static v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

static int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (SWIG_V8_VERSION < 0x031710)
static void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
static void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
static void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

static int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

static void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

static int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

static v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif    
  }

#if (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

static SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

static SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
static void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
static void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif  
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AJ_MemberType swig_types[0]
#define SWIGTYPE_p_AJ_ObjectIterator swig_types[1]
#define SWIGTYPE_p_AJ_Service swig_types[2]
#define SWIGTYPE_p_AJ_Status swig_types[3]
#define SWIGTYPE_p_AllJoynConfiguration swig_types[4]
#define SWIGTYPE_p_MessageHandlerEntry swig_types[5]
#define SWIGTYPE_p_PropHandlerEntry swig_types[6]
#define SWIGTYPE_p__AJ_Arg swig_types[7]
#define SWIGTYPE_p__AJ_BusAttachment swig_types[8]
#define SWIGTYPE_p__AJ_Credential swig_types[9]
#define SWIGTYPE_p__AJ_IOBuffer swig_types[10]
#define SWIGTYPE_p__AJ_MCastSocket swig_types[11]
#define SWIGTYPE_p__AJ_Message swig_types[12]
#define SWIGTYPE_p__AJ_MsgHeader swig_types[13]
#define SWIGTYPE_p__AJ_NetSocket swig_types[14]
#define SWIGTYPE_p__AJ_Object swig_types[15]
#define SWIGTYPE_p__AJ_SessionOpts swig_types[16]
#define SWIGTYPE_p__AJ_Time swig_types[17]
#define SWIGTYPE_p_char swig_types[18]
#define SWIGTYPE_p_f_p__AJ_Message__uint8_t swig_types[19]
#define SWIGTYPE_p_f_p__AJ_Message_p__AJ_Message__AJ_Status swig_types[20]
#define SWIGTYPE_p_f_p__AJ_Message_p_q_const__char__AJ_Status swig_types[21]
#define SWIGTYPE_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status swig_types[22]
#define SWIGTYPE_p_f_p_q_const__void_enum_AJ_Status__void swig_types[23]
#define SWIGTYPE_p_f_p_uint8_t_uint32_t__uint32_t swig_types[24]
#define SWIGTYPE_p_f_p_void__void swig_types[25]
#define SWIGTYPE_p_f_uint32_t_p_q_const__char__p_char swig_types[26]
#define SWIGTYPE_p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status swig_types[27]
#define SWIGTYPE_p_f_uint8_t__void swig_types[28]
#define SWIGTYPE_p_int32_t swig_types[29]
#define SWIGTYPE_p_int8_t swig_types[30]
#define SWIGTYPE_p_p_char swig_types[31]
#define SWIGTYPE_p_p_p_char swig_types[32]
#define SWIGTYPE_p_p_void swig_types[33]
#define SWIGTYPE_p_size_t swig_types[34]
#define SWIGTYPE_p_uint32_t swig_types[35]
#define SWIGTYPE_p_uint64_t swig_types[36]
#define SWIGTYPE_p_uint8_t swig_types[37]
#define SWIGTYPE_p_void swig_types[38]
static swig_type_info *swig_types[40];
static swig_module_info swig_module = {swig_types, 39, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#define SWIG_FILE_WITH_INIT
#include <alljoyn.h>


#include "aj_target.h"


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (v8::Handle<v8::Value> obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned short)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include "aj_status.h"


#include "aj_bufio.h"


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  return res;
}


#include "aj_net.h"


#include "aj_util.h"


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include "aj_auth_listener.h"


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  ((unsigned long)(value));
}


#include "aj_bus.h"


SWIGINTERN int
SWIG_AsCharArray(v8::Handle<v8::Value> obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


 #include "aj_msg.h"


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_char (v8::Handle<v8::Value> obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = (char)(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}


#include "aj_debug.h"


#include "aj_version.h"


#include "aj_init.h"


#include "aj_introspect.h"


#include "aj_std.h"


#include "aj_connect.h"


#include "aj_about.h"


#include "aj_helper.h"


#define SWIGV8_INIT alljoyn_initialize


SWIGV8_ClientData _exports_AJ_IOBuffer_clientData;
SWIGV8_ClientData _exports_AJ_NetSocket_clientData;
SWIGV8_ClientData _exports_AJ_MCastSocket_clientData;
SWIGV8_ClientData _exports_AJ_Time_clientData;
SWIGV8_ClientData _exports_AJ_Credential_clientData;
SWIGV8_ClientData _exports_AJ_BusAttachment_clientData;
SWIGV8_ClientData _exports_AJ_SessionOpts_clientData;
SWIGV8_ClientData _exports__AJ_Arg_clientData;
SWIGV8_ClientData _exports_AJ_MsgHeader_clientData;
SWIGV8_ClientData _exports__AJ_Message_clientData;
SWIGV8_ClientData _exports_AJ_Object_clientData;
SWIGV8_ClientData _exports_AJ_ObjectIterator_clientData;
SWIGV8_ClientData _exports_MessageHandlerEntry_clientData;
SWIGV8_ClientData _exports_PropHandlerEntry_clientData;
SWIGV8_ClientData _exports_AllJoynConfiguration_clientData;


static SwigV8ReturnValue _wrap_TRUE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((1)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_FALSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((0)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_HOST_IS_LITTLE_ENDIAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((1)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_HOST_IS_BIG_ENDIAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((0)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dbgINIT_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  uint8_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(value, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbgINIT_set" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = (uint8_t)(val1);
  dbgINIT = arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dbgINIT_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = dbgINIT;
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dbgNET_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  uint8_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(value, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbgNET_set" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = (uint8_t)(val1);
  dbgNET = arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dbgNET_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = dbgNET;
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_dbgTARGET_UTIL_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  uint8_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(value, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbgTARGET_UTIL_set" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = (uint8_t)(val1);
  dbgTARGET_UTIL = arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_dbgTARGET_UTIL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = dbgTARGET_UTIL;
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_OK));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_NULL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_NULL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_UNEXPECTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_UNEXPECTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_INVALID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_IO_BUFFER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_IO_BUFFER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_READ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_READ));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_WRITE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_WRITE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_TIMEOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_TIMEOUT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_MARSHAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_MARSHAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_UNMARSHAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_UNMARSHAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_END_OF_DATA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_END_OF_DATA));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_RESOURCES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_RESOURCES));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_NO_MORE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_NO_MORE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_SECURITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_SECURITY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_CONNECT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_CONNECT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_NO_MATCH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_NO_MATCH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_SIGNATURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_SIGNATURE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_DISALLOWED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_DISALLOWED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_FAILURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_FAILURE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_RESTART(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_RESTART));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_LINK_TIMEOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_LINK_TIMEOUT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_DRIVER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_DRIVER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_OBJECT_PATH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_OBJECT_PATH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_BUSY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_BUSY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_DHCP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_DHCP));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_ACCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_ACCESS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_SESSION_LOST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_SESSION_LOST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_LINK_DEAD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_LINK_DEAD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_HDR_CORRUPT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_HDR_CORRUPT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_RESTART_APP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_RESTART_APP));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_INTERRUPTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_INTERRUPTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_REJECTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_REJECTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_RANGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_RANGE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_ACCESS_ROUTING_NODE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_ACCESS_ROUTING_NODE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_KEY_EXPIRED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_KEY_EXPIRED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_SPI_NO_SPACE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_SPI_NO_SPACE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_SPI_READ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_SPI_READ));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_SPI_WRITE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_SPI_WRITE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_OLD_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_OLD_VERSION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_NVRAM_READ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_NVRAM_READ));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ERR_NVRAM_WRITE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_ERR_NVRAM_WRITE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_STATUS_LAST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_STATUS_LAST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_IO_BUF_RX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_IO_BUF_TX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_IO_BUF_AJ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_IO_BUF_MDNS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_IOBuffer_direction_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_direction_set" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_IOBuffer_direction_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->direction = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_IOBuffer_direction_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_direction_get" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  result =  ((arg1)->direction);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_IOBuffer_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_flags_set" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_IOBuffer_flags_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_IOBuffer_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_flags_get" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_IOBuffer_bufSize_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_bufSize_set" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_IOBuffer_bufSize_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->bufSize = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_IOBuffer_bufSize_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_bufSize_get" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  result =  ((arg1)->bufSize);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_IOBuffer_bufStart_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_bufStart_set" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_uint8_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_IOBuffer_bufStart_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  if (arg1) (arg1)->bufStart = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_IOBuffer_bufStart_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_bufStart_get" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  result = (uint8_t *) ((arg1)->bufStart);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_IOBuffer_readPtr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_readPtr_set" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_uint8_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_IOBuffer_readPtr_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  if (arg1) (arg1)->readPtr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_IOBuffer_readPtr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_readPtr_get" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  result = (uint8_t *) ((arg1)->readPtr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_IOBuffer_writePtr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_writePtr_set" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_uint8_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_IOBuffer_writePtr_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  if (arg1) (arg1)->writePtr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_IOBuffer_writePtr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_writePtr_get" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  result = (uint8_t *) ((arg1)->writePtr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_IOBuffer_context_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_context_set" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_IOBuffer_context_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->context = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_IOBuffer_context_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_IOBuffer *arg1 = (_AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBuffer_context_get" "', argument " "1"" of type '" "_AJ_IOBuffer *""'"); 
  }
  arg1 = (_AJ_IOBuffer *)(argp1);
  result = (void *) ((arg1)->context);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_IOBuffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_IOBuffer *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_IOBuffer.");
  result = (_AJ_IOBuffer *)new _AJ_IOBuffer();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_IOBuffer, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_IOBuffer(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_IOBuffer(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_IOBuffer(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_IOBuffer(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_IOBuffer * arg1 = (_AJ_IOBuffer *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_IOBufInit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_IOBuffer *arg1 = (AJ_IOBuffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int res5 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_IOBufInit.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBufInit" "', argument " "1"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg1 = (AJ_IOBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_IOBufInit" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_IOBufInit" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_IOBufInit" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  res5 = SWIG_ConvertPtr(args[4],SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AJ_IOBufInit" "', argument " "5"" of type '" "void *""'"); 
  }
  AJ_IOBufInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_IOBufRebase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_IOBuffer *arg1 = (AJ_IOBuffer *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_IOBufRebase.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IOBufRebase" "', argument " "1"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg1 = (AJ_IOBuffer *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_IOBufRebase" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  AJ_IOBufRebase(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ADDR_IPV4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ADDR_IPV6(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x60));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_NetSocket_tx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_NetSocket *arg1 = (_AJ_NetSocket *) 0 ;
  AJ_IOBuffer *arg2 = (AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_NetSocket_tx_set" "', argument " "1"" of type '" "_AJ_NetSocket *""'"); 
  }
  arg1 = (_AJ_NetSocket *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_NetSocket_tx_set" "', argument " "2"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg2 = (AJ_IOBuffer *)(argp2);
  if (arg1) (arg1)->tx = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_NetSocket_tx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_NetSocket *arg1 = (_AJ_NetSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_IOBuffer *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_NetSocket_tx_get" "', argument " "1"" of type '" "_AJ_NetSocket *""'"); 
  }
  arg1 = (_AJ_NetSocket *)(argp1);
  result = (AJ_IOBuffer *)& ((arg1)->tx);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_NetSocket_rx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_NetSocket *arg1 = (_AJ_NetSocket *) 0 ;
  AJ_IOBuffer *arg2 = (AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_NetSocket_rx_set" "', argument " "1"" of type '" "_AJ_NetSocket *""'"); 
  }
  arg1 = (_AJ_NetSocket *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_NetSocket_rx_set" "', argument " "2"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg2 = (AJ_IOBuffer *)(argp2);
  if (arg1) (arg1)->rx = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_NetSocket_rx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_NetSocket *arg1 = (_AJ_NetSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_IOBuffer *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_NetSocket_rx_get" "', argument " "1"" of type '" "_AJ_NetSocket *""'"); 
  }
  arg1 = (_AJ_NetSocket *)(argp1);
  result = (AJ_IOBuffer *)& ((arg1)->rx);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_NetSocket(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_NetSocket *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_NetSocket.");
  result = (_AJ_NetSocket *)new _AJ_NetSocket();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_NetSocket, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_NetSocket(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_NetSocket(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_NetSocket(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_NetSocket(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_NetSocket * arg1 = (_AJ_NetSocket *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_Net_Connect(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_NetSocket *arg1 = (AJ_NetSocket *) 0 ;
  uint16_t arg2 ;
  uint8_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Net_Connect.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Net_Connect" "', argument " "1"" of type '" "AJ_NetSocket *""'"); 
  }
  arg1 = (AJ_NetSocket *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Net_Connect" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_Net_Connect" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_Net_Connect" "', argument " "4"" of type '" "uint32_t const *""'"); 
  }
  arg4 = (uint32_t *)(argp4);
  result = (AJ_Status)AJ_Net_Connect(arg1,arg2,arg3,(uint32_t const *)arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Net_Disconnect(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_NetSocket *arg1 = (AJ_NetSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Net_Disconnect.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Net_Disconnect" "', argument " "1"" of type '" "AJ_NetSocket *""'"); 
  }
  arg1 = (AJ_NetSocket *)(argp1);
  AJ_Net_Disconnect(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Net_Send(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_IOBuffer *arg1 = (AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Net_Send.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Net_Send" "', argument " "1"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg1 = (AJ_IOBuffer *)(argp1);
  result = (AJ_Status)AJ_Net_Send(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Net_Recv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_IOBuffer *arg1 = (AJ_IOBuffer *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Net_Recv.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Net_Recv" "', argument " "1"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg1 = (AJ_IOBuffer *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Net_Recv" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_Net_Recv" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = (AJ_Status)AJ_Net_Recv(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_AJ_MCastSocket_tx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MCastSocket *arg1 = (_AJ_MCastSocket *) 0 ;
  AJ_IOBuffer *arg2 = (AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MCastSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MCastSocket_tx_set" "', argument " "1"" of type '" "_AJ_MCastSocket *""'"); 
  }
  arg1 = (_AJ_MCastSocket *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MCastSocket_tx_set" "', argument " "2"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg2 = (AJ_IOBuffer *)(argp2);
  if (arg1) (arg1)->tx = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MCastSocket_tx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MCastSocket *arg1 = (_AJ_MCastSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_IOBuffer *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MCastSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MCastSocket_tx_get" "', argument " "1"" of type '" "_AJ_MCastSocket *""'"); 
  }
  arg1 = (_AJ_MCastSocket *)(argp1);
  result = (AJ_IOBuffer *)& ((arg1)->tx);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_MCastSocket_rx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MCastSocket *arg1 = (_AJ_MCastSocket *) 0 ;
  AJ_IOBuffer *arg2 = (AJ_IOBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MCastSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MCastSocket_rx_set" "', argument " "1"" of type '" "_AJ_MCastSocket *""'"); 
  }
  arg1 = (_AJ_MCastSocket *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MCastSocket_rx_set" "', argument " "2"" of type '" "AJ_IOBuffer *""'"); 
  }
  arg2 = (AJ_IOBuffer *)(argp2);
  if (arg1) (arg1)->rx = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MCastSocket_rx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MCastSocket *arg1 = (_AJ_MCastSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_IOBuffer *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MCastSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MCastSocket_rx_get" "', argument " "1"" of type '" "_AJ_MCastSocket *""'"); 
  }
  arg1 = (_AJ_MCastSocket *)(argp1);
  result = (AJ_IOBuffer *)& ((arg1)->rx);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_IOBuffer, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_MCastSocket(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_MCastSocket *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_MCastSocket.");
  result = (_AJ_MCastSocket *)new _AJ_MCastSocket();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_MCastSocket, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_MCastSocket(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_MCastSocket(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_MCastSocket(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_MCastSocket(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_MCastSocket * arg1 = (_AJ_MCastSocket *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_Net_MCastUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_MCastSocket *arg1 = (AJ_MCastSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Net_MCastUp.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_MCastSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Net_MCastUp" "', argument " "1"" of type '" "AJ_MCastSocket *""'"); 
  }
  arg1 = (AJ_MCastSocket *)(argp1);
  result = (AJ_Status)AJ_Net_MCastUp(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Net_MCastDown(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_MCastSocket *arg1 = (AJ_MCastSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Net_MCastDown.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_MCastSocket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Net_MCastDown" "', argument " "1"" of type '" "AJ_MCastSocket *""'"); 
  }
  arg1 = (AJ_MCastSocket *)(argp1);
  AJ_Net_MCastDown(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Net_Interrupt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Net_Interrupt.");
  
  AJ_Net_Interrupt();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_GetLine(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  char temp1 ;
  int res1 = SWIG_TMPOBJ ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetLine.");
  
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_GetLine" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_GetLine" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (char *)AJ_GetLine(arg1,arg2,arg3);
  jsresult = SWIG_FromCharPtr((const char *)result);
  if (SWIG_IsTmpObj(res1)) {
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_From_char((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_char, new_flags));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_GetCmdLine(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char temp1 ;
  int res1 = SWIG_TMPOBJ ;
  size_t val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetCmdLine.");
  
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_GetCmdLine" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (char *)AJ_GetCmdLine(arg1,arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  if (SWIG_IsTmpObj(res1)) {
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_From_char((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_char, new_flags));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_AJ_Time_milliseconds_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Time *arg1 = (_AJ_Time *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Time_milliseconds_set" "', argument " "1"" of type '" "_AJ_Time *""'"); 
  }
  arg1 = (_AJ_Time *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Time_milliseconds_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->milliseconds = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Time_milliseconds_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Time *arg1 = (_AJ_Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Time_milliseconds_get" "', argument " "1"" of type '" "_AJ_Time *""'"); 
  }
  arg1 = (_AJ_Time *)(argp1);
  result =  ((arg1)->milliseconds);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Time_seconds_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Time *arg1 = (_AJ_Time *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Time_seconds_set" "', argument " "1"" of type '" "_AJ_Time *""'"); 
  }
  arg1 = (_AJ_Time *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Time_seconds_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->seconds = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Time_seconds_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Time *arg1 = (_AJ_Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Time_seconds_get" "', argument " "1"" of type '" "_AJ_Time *""'"); 
  }
  arg1 = (_AJ_Time *)(argp1);
  result =  ((arg1)->seconds);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_Time(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_Time *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_Time.");
  result = (_AJ_Time *)new _AJ_Time();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_Time, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_Time(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_Time(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_Time(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_Time(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_Time * arg1 = (_AJ_Time *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_GetVersion(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetVersion.");
  
  result = (char *)AJ_GetVersion();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_GetElapsedTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Time *arg1 = (AJ_Time *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  uint32_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetElapsedTime.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_GetElapsedTime" "', argument " "1"" of type '" "AJ_Time *""'"); 
  }
  arg1 = (AJ_Time *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_GetElapsedTime" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  result = AJ_GetElapsedTime(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap__AJ_GetDebugTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Time *arg1 = (AJ_Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap__AJ_GetDebugTime.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_GetDebugTime" "', argument " "1"" of type '" "AJ_Time *""'"); 
  }
  arg1 = (AJ_Time *)(argp1);
  result = (AJ_Status)_AJ_GetDebugTime(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InitTimer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Time *arg1 = (AJ_Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InitTimer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InitTimer" "', argument " "1"" of type '" "AJ_Time *""'"); 
  }
  arg1 = (AJ_Time *)(argp1);
  AJ_InitTimer(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_GetTimeDifference(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Time *arg1 = (AJ_Time *) 0 ;
  AJ_Time *arg2 = (AJ_Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int32_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetTimeDifference.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_GetTimeDifference" "', argument " "1"" of type '" "AJ_Time *""'"); 
  }
  arg1 = (AJ_Time *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_GetTimeDifference" "', argument " "2"" of type '" "AJ_Time *""'"); 
  }
  arg2 = (AJ_Time *)(argp2);
  result = AJ_GetTimeDifference(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new int32_t((const int32_t&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_TimeAddOffset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Time *arg1 = (AJ_Time *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_TimeAddOffset.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_TimeAddOffset" "', argument " "1"" of type '" "AJ_Time *""'"); 
  }
  arg1 = (AJ_Time *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_TimeAddOffset" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  AJ_TimeAddOffset(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_CompareTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Time arg1 ;
  AJ_Time arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int8_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_CompareTime.");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p__AJ_Time,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_CompareTime" "', argument " "1"" of type '" "AJ_Time""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AJ_CompareTime" "', argument " "1"" of type '" "AJ_Time""'");
    } else {
      arg1 = *((AJ_Time *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p__AJ_Time,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_CompareTime" "', argument " "2"" of type '" "AJ_Time""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AJ_CompareTime" "', argument " "2"" of type '" "AJ_Time""'");
    } else {
      arg2 = *((AJ_Time *)(argp2));
    }
  }
  result = AJ_CompareTime(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new int8_t((const int8_t&)(result))), SWIGTYPE_p_int8_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_TIMER_FOREVER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(-1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_Sleep(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Sleep.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_Sleep" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  AJ_Sleep(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Malloc(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Malloc.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_Malloc" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = (size_t)(val1);
  result = (void *)AJ_Malloc(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Realloc(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  int res1 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Realloc.");
  
  res1 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Realloc" "', argument " "1"" of type '" "void *""'"); 
  }
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Realloc" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (void *)AJ_Realloc(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Free(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  int res1 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Free.");
  
  res1 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Free" "', argument " "1"" of type '" "void *""'"); 
  }
  AJ_Free(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StringFindFirstOf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int32_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StringFindFirstOf.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_StringFindFirstOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_StringFindFirstOf" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  result = AJ_StringFindFirstOf((char const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj((new int32_t((const int32_t&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_RawToHex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_RawToHex.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_RawToHex" "', argument " "1"" of type '" "uint8_t const *""'"); 
  }
  arg1 = (uint8_t *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_RawToHex" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_RawToHex" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_RawToHex" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AJ_RawToHex" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  result = (AJ_Status)AJ_RawToHex((uint8_t const *)arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int((int)(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_HexToRaw(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_HexToRaw.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_HexToRaw" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_HexToRaw" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_HexToRaw" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = (uint8_t *)(argp3);
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_HexToRaw" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  result = (AJ_Status)AJ_HexToRaw((char const *)arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StartReadFromStdIn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StartReadFromStdIn.");
  
  result = AJ_StartReadFromStdIn();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StopReadFromStdIn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StopReadFromStdIn.");
  
  result = AJ_StopReadFromStdIn();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_RawToB64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_RawToB64.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_RawToB64" "', argument " "1"" of type '" "uint8_t const *""'"); 
  }
  arg1 = (uint8_t *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_RawToB64" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_RawToB64" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_RawToB64" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  result = (AJ_Status)AJ_RawToB64((uint8_t const *)arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_B64ToRaw(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_B64ToRaw.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_B64ToRaw" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_B64ToRaw" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_B64ToRaw" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = (uint8_t *)(argp3);
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_B64ToRaw" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  result = (AJ_Status)AJ_B64ToRaw((char const *)arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ByteSwap16(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint16_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  uint16_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ByteSwap16.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_ByteSwap16" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = (uint16_t)(val1);
  result = AJ_ByteSwap16(arg1);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ByteSwap32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ByteSwap32.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_ByteSwap32" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  result = AJ_ByteSwap32(arg1);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ByteSwap64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint64_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  uint64_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ByteSwap64.");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ByteSwap64" "', argument " "1"" of type '" "uint64_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AJ_ByteSwap64" "', argument " "1"" of type '" "uint64_t""'");
    } else {
      arg1 = *((uint64_t *)(argp1));
    }
  }
  result = AJ_ByteSwap64(arg1);
  jsresult = SWIG_NewPointerObj((new uint64_t((const uint64_t&)(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_IntToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int32_t arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_IntToString.");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IntToString" "', argument " "1"" of type '" "int32_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AJ_IntToString" "', argument " "1"" of type '" "int32_t""'");
    } else {
      arg1 = *((int32_t *)(argp1));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_IntToString" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_IntToString" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = (AJ_Status)AJ_IntToString(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InetToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InetToString.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_InetToString" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_InetToString" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_InetToString" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = (AJ_Status)AJ_InetToString(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_CRED_PRV_KEY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0001));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_CRED_PUB_KEY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0002));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_CRED_CERT_CHAIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0003));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_CRED_CERT_TRUST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0004));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_CRED_CERT_ROOT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0005));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Credential_mask_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_mask_set" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Credential_mask_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->mask = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Credential_mask_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_mask_get" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  result =  ((arg1)->mask);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Credential_expiration_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_expiration_set" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Credential_expiration_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->expiration = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Credential_expiration_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_expiration_get" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  result =  ((arg1)->expiration);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Credential_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_data_set" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_uint8_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_Credential_data_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  if (arg1) (arg1)->data = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Credential_data_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_data_get" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  result = (uint8_t *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Credential_len_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_len_set" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  ecode2 = SWIG_AsVal_size_t(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Credential_len_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  if (arg1) (arg1)->len = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Credential_len_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Credential *arg1 = (_AJ_Credential *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Credential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Credential_len_get" "', argument " "1"" of type '" "_AJ_Credential *""'"); 
  }
  arg1 = (_AJ_Credential *)(argp1);
  result =  ((arg1)->len);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_Credential(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_Credential *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_Credential.");
  result = (_AJ_Credential *)new _AJ_Credential();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_Credential, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_Credential(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_Credential(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_Credential(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_Credential(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_Credential * arg1 = (_AJ_Credential *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_AJ_BusAttachment_aboutPort_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_aboutPort_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusAttachment_aboutPort_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->aboutPort = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_aboutPort_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_aboutPort_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result =  ((arg1)->aboutPort);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_BusAttachment_uniqueName_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_uniqueName_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusAttachment_uniqueName_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->uniqueName,arg2,16*sizeof(char));
  else memset(arg1->uniqueName,0,16*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_uniqueName_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_uniqueName_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result = (char *)(char *) ((arg1)->uniqueName);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_BusAttachment_sock_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  AJ_NetSocket *arg2 = (AJ_NetSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_sock_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusAttachment_sock_set" "', argument " "2"" of type '" "AJ_NetSocket *""'"); 
  }
  arg2 = (AJ_NetSocket *)(argp2);
  if (arg1) (arg1)->sock = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_sock_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_NetSocket *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_sock_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result = (AJ_NetSocket *)& ((arg1)->sock);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_NetSocket, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_BusAttachment_serial_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_serial_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusAttachment_serial_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->serial = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_serial_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_serial_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result =  ((arg1)->serial);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_BusAttachment_pwdCallback_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  AJ_AuthPwdFunc arg2 = (AJ_AuthPwdFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_pwdCallback_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_uint8_t_uint32_t__uint32_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusAttachment_pwdCallback_set" "', argument " "2"" of type '" "AJ_AuthPwdFunc""'"); 
    }
  }
  if (arg1) (arg1)->pwdCallback = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_pwdCallback_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_AuthPwdFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_pwdCallback_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result = (AJ_AuthPwdFunc) ((arg1)->pwdCallback);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_uint8_t_uint32_t__uint32_t);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_BusAttachment_authListenerCallback_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  AJ_AuthListenerFunc arg2 = (AJ_AuthListenerFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_authListenerCallback_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusAttachment_authListenerCallback_set" "', argument " "2"" of type '" "AJ_AuthListenerFunc""'"); 
    }
  }
  if (arg1) (arg1)->authListenerCallback = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_authListenerCallback_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_AuthListenerFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_authListenerCallback_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result = (AJ_AuthListenerFunc) ((arg1)->authListenerCallback);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_BusAttachment_suites_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_suites_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_uint32_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusAttachment_suites_set" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = (uint32_t *)(argp2);
  if (arg1) (arg1)->suites = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_suites_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_suites_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result = (uint32_t *) ((arg1)->suites);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint32_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_BusAttachment_numsuites_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_numsuites_set" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_size_t(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusAttachment_numsuites_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  if (arg1) (arg1)->numsuites = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_BusAttachment_numsuites_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_BusAttachment *arg1 = (_AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAttachment_numsuites_get" "', argument " "1"" of type '" "_AJ_BusAttachment *""'"); 
  }
  arg1 = (_AJ_BusAttachment *)(argp1);
  result =  ((arg1)->numsuites);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_BusAttachment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_BusAttachment *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_BusAttachment.");
  result = (_AJ_BusAttachment *)new _AJ_BusAttachment();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_BusAttachment, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_BusAttachment(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_BusAttachment(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_BusAttachment(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_BusAttachment(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_BusAttachment * arg1 = (_AJ_BusAttachment *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_GetUniqueName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetUniqueName.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_GetUniqueName" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  result = (char *)AJ_GetUniqueName(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_NAME_REQ_ALLOW_REPLACEMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_NAME_REQ_REPLACE_EXISTING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_NAME_REQ_DO_NOT_QUEUE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusRequestName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusRequestName.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusRequestName" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusRequestName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusRequestName" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = (AJ_Status)AJ_BusRequestName(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_NONE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_ALL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xFFFF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_LOCAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0001));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_BLUETOOTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0002));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_WLAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0004));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_WWAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0008));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_LAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0010));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_TCP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0004));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_UDP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_IP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((0x0004|0x0100)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_TRANSPORT_ANY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((0xFFFF)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusReleaseName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusReleaseName.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusReleaseName" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusReleaseName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (AJ_Status)AJ_BusReleaseName(arg1,(char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BUS_START_ADVERTISING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BUS_STOP_ADVERTISING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusAdvertiseName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusAdvertiseName.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAdvertiseName" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusAdvertiseName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusAdvertiseName" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = (uint16_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_BusAdvertiseName" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AJ_BusAdvertiseName" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  result = (AJ_Status)AJ_BusAdvertiseName(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BUS_START_FINDING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BUS_STOP_FINDING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FIND_NAME_STARTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FIND_NAME_ALREADY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FIND_NAME_FAILURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusFindAdvertisedName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusFindAdvertisedName.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusFindAdvertisedName" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusFindAdvertisedName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusFindAdvertisedName" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  result = (AJ_Status)AJ_BusFindAdvertisedName(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusFindAdvertisedNameByTransport(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16_t arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusFindAdvertisedNameByTransport.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusFindAdvertisedNameByTransport" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusFindAdvertisedNameByTransport" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusFindAdvertisedNameByTransport" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = (uint16_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_BusFindAdvertisedNameByTransport" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  result = (AJ_Status)AJ_BusFindAdvertisedNameByTransport(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_SESSION_PROXIMITY_ANY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xFF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SESSION_PROXIMITY_PHYSICAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SESSION_PROXIMITY_NETWORK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SESSION_TRAFFIC_MESSAGES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SESSION_TRAFFIC_RAW_UNRELIABLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SESSION_TRAFFIC_RAW_RELIABLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SESSION_PORT_ANY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x00));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_SessionOpts_traffic_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_traffic_set" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_SessionOpts_traffic_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->traffic = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_SessionOpts_traffic_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_traffic_get" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  result =  ((arg1)->traffic);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_SessionOpts_proximity_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_proximity_set" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_SessionOpts_proximity_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->proximity = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_SessionOpts_proximity_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_proximity_get" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  result =  ((arg1)->proximity);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_SessionOpts_transports_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_transports_set" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_SessionOpts_transports_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->transports = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_SessionOpts_transports_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_transports_get" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  result =  ((arg1)->transports);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_SessionOpts_isMultipoint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_isMultipoint_set" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_SessionOpts_isMultipoint_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->isMultipoint = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_SessionOpts_isMultipoint_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_SessionOpts *arg1 = (_AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SessionOpts_isMultipoint_get" "', argument " "1"" of type '" "_AJ_SessionOpts *""'"); 
  }
  arg1 = (_AJ_SessionOpts *)(argp1);
  result =  ((arg1)->isMultipoint);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_SessionOpts(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_SessionOpts *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_SessionOpts.");
  result = (_AJ_SessionOpts *)new _AJ_SessionOpts();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_SessionOpts, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_SessionOpts(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_SessionOpts(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_SessionOpts(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_SessionOpts(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_SessionOpts * arg1 = (_AJ_SessionOpts *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_BusBindSessionPort(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint16_t arg2 ;
  AJ_SessionOpts *arg3 = (AJ_SessionOpts *) 0 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusBindSessionPort.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusBindSessionPort" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusBindSessionPort" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_BusBindSessionPort" "', argument " "3"" of type '" "AJ_SessionOpts const *""'"); 
  }
  arg3 = (AJ_SessionOpts *)(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_BusBindSessionPort" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  result = (AJ_Status)AJ_BusBindSessionPort(arg1,arg2,(_AJ_SessionOpts const *)arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusUnbindSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusUnbindSession.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusUnbindSession" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusUnbindSession" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  result = (AJ_Status)AJ_BusUnbindSession(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusCancelSessionless(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusCancelSessionless.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusCancelSessionless" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusCancelSessionless" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = (AJ_Status)AJ_BusCancelSessionless(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_CANCELSESSIONLESS_REPLY_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_CANCELSESSIONLESS_REPLY_NO_SUCH_MSG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_CANCELSESSIONLESS_REPLY_NOT_ALLOWED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_CANCELSESSIONLESS_REPLY_FAILED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusReplyAcceptSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusReplyAcceptSession.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusReplyAcceptSession" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusReplyAcceptSession" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = (AJ_Status)AJ_BusReplyAcceptSession(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusJoinSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16_t arg3 ;
  AJ_SessionOpts *arg4 = (AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusJoinSession.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusJoinSession" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusJoinSession" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusJoinSession" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = (uint16_t)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_BusJoinSession" "', argument " "4"" of type '" "AJ_SessionOpts const *""'"); 
  }
  arg4 = (AJ_SessionOpts *)(argp4);
  result = (AJ_Status)AJ_BusJoinSession(arg1,(char const *)arg2,arg3,(_AJ_SessionOpts const *)arg4);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusLeaveSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusLeaveSession.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusLeaveSession" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusLeaveSession" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = (AJ_Status)AJ_BusLeaveSession(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BUS_SIGNAL_ALLOW(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BUS_SIGNAL_DENY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusSetSignalRule(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusSetSignalRule.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusSetSignalRule" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusSetSignalRule" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusSetSignalRule" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  result = (AJ_Status)AJ_BusSetSignalRule(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusSetSignalRuleSerial(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusSetSignalRuleSerial.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusSetSignalRuleSerial" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusSetSignalRuleSerial" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusSetSignalRuleSerial" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_BusSetSignalRuleSerial" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  res5 = SWIG_ConvertPtr(args[4], &argp5,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AJ_BusSetSignalRuleSerial" "', argument " "5"" of type '" "uint32_t *""'"); 
  }
  arg5 = (uint32_t *)(argp5);
  result = (AJ_Status)AJ_BusSetSignalRuleSerial(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusAddSignalRule(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusAddSignalRule.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAddSignalRule" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusAddSignalRule" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_BusAddSignalRule" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_BusAddSignalRule" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  result = (AJ_Status)AJ_BusAddSignalRule(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusSetSignalRuleFlags(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusSetSignalRuleFlags.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusSetSignalRuleFlags" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusSetSignalRuleFlags" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusSetSignalRuleFlags" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_BusSetSignalRuleFlags" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  result = (AJ_Status)AJ_BusSetSignalRuleFlags(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_SETLINKTIMEOUT_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SETLINKTIMEOUT_NO_DEST_SUPPORT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SETLINKTIMEOUT_NO_SESSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SETLINKTIMEOUT_FAILED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusSetLinkTimeout(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusSetLinkTimeout.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusSetLinkTimeout" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusSetLinkTimeout" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusSetLinkTimeout" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = (AJ_Status)AJ_BusSetLinkTimeout(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusRemoveSessionMember(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusRemoveSessionMember.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusRemoveSessionMember" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BusRemoveSessionMember" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_BusRemoveSessionMember" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (AJ_Status)AJ_BusRemoveSessionMember(arg1,arg2,(char const *)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusPing(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusPing.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusPing" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusPing" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusPing" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = (AJ_Status)AJ_BusPing(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_PING_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PING_FAILED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PING_TIMEOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusHandleBusMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusHandleBusMessage.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusHandleBusMessage" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_BusHandleBusMessage(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusSetPasswordCallback(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  AJ_AuthPwdFunc arg2 = (AJ_AuthPwdFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusSetPasswordCallback.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusSetPasswordCallback" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_uint8_t_uint32_t__uint32_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusSetPasswordCallback" "', argument " "2"" of type '" "AJ_AuthPwdFunc""'"); 
    }
  }
  AJ_BusSetPasswordCallback(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusSetAuthListenerCallback(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  AJ_AuthListenerFunc arg2 = (AJ_AuthListenerFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusSetAuthListenerCallback.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusSetAuthListenerCallback" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusSetAuthListenerCallback" "', argument " "2"" of type '" "AJ_AuthListenerFunc""'"); 
    }
  }
  AJ_BusSetAuthListenerCallback(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusAuthenticatePeer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  AJ_BusAuthPeerCallback arg3 = (AJ_BusAuthPeerCallback) 0 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusAuthenticatePeer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusAuthenticatePeer" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusAuthenticatePeer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    int res = SWIG_ConvertFunctionPtr(args[2], (void**)(&arg3), SWIGTYPE_p_f_p_q_const__void_enum_AJ_Status__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusAuthenticatePeer" "', argument " "3"" of type '" "AJ_BusAuthPeerCallback""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(args[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_BusAuthenticatePeer" "', argument " "4"" of type '" "void *""'"); 
  }
  result = (AJ_Status)AJ_BusAuthenticatePeer(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusPropGet(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_BusPropGetCallback arg2 = (AJ_BusPropGetCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusPropGet.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusPropGet" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusPropGet" "', argument " "2"" of type '" "AJ_BusPropGetCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_BusPropGet" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (AJ_Status)AJ_BusPropGet(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusPropGetAll(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_BusPropGetCallback arg2 = (AJ_BusPropGetCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusPropGetAll.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusPropGetAll" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusPropGetAll" "', argument " "2"" of type '" "AJ_BusPropGetCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_BusPropGetAll" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (AJ_Status)AJ_BusPropGetAll(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusPropSet(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_BusPropSetCallback arg2 = (AJ_BusPropSetCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusPropSet.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusPropSet" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_BusPropSet" "', argument " "2"" of type '" "AJ_BusPropSetCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_BusPropSet" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (AJ_Status)AJ_BusPropSet(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BusEnableSecurity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BusEnableSecurity.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_BusEnableSecurity" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_BusEnableSecurity" "', argument " "2"" of type '" "uint32_t const *""'"); 
  }
  arg2 = (uint32_t *)(argp2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BusEnableSecurity" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = (AJ_Status)AJ_BusEnableSecurity(arg1,(uint32_t const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ARG_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('\0'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_ARRAY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('a'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_BOOLEAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('b'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_DOUBLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('d'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_SIGNATURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('g'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_HANDLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('h'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_INT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('i'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_INT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('n'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_OBJ_PATH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('o'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_UINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('q'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_STRING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('s'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_UINT64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('t'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_UINT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('u'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_VARIANT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('v'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_INT64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('x'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_BYTE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('y'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_STRUCT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('('));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARG_DICT_ENTRY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('{'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ARRAY_FLAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_LITTLE_ENDIAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('l'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BIG_ENDIAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('B'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_NATIVE_ENDIAN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)('l'));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_NO_FLAGS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x00));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FLAG_NO_REPLY_EXPECTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FLAG_AUTO_START(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FLAG_ALLOW_REMOTE_MSG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FLAG_SESSIONLESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FLAG_GLOBAL_BROADCAST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FLAG_COMPRESSED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_FLAG_ENCRYPTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x80));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_ALLJOYN_FLAG_SESSIONLESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_MAJOR_PROTOCOL_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_MSG_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_MSG_METHOD_CALL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_MSG_METHOD_RET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_MSG_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_MSG_SIGNAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x00));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_OBJ_PATH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_INTERFACE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_MEMBER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x03));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_ERROR_NAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_REPLY_SERIAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x05));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_DESTINATION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x06));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_SENDER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x07));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_SIGNATURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_HANDLES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x09));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_TIMESTAMP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_TIME_TO_LIVE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_COMPRESSION_TOKEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_HDR_SESSION_ID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x13));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_MAX_SERVICE_NAME_SIZE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(256));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Arg_typeId_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_typeId_set" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Arg_typeId_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->typeId = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Arg_typeId_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_typeId_get" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  result =  ((arg1)->typeId);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Arg_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_flags_set" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Arg_flags_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Arg_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_flags_get" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Arg_len_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_len_set" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Arg_len_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->len = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Arg_len_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_len_get" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  result =  ((arg1)->len);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Arg_sigPtr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_sigPtr_set" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Arg_sigPtr_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->sigPtr = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->sigPtr = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Arg_sigPtr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_sigPtr_get" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  result = (char *) ((arg1)->sigPtr);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Arg_container_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  _AJ_Arg *arg2 = (_AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_container_set" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_Arg, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Arg_container_set" "', argument " "2"" of type '" "_AJ_Arg *""'"); 
  }
  arg2 = (_AJ_Arg *)(argp2);
  if (arg1) (arg1)->container = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Arg_container_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Arg *arg1 = (_AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  _AJ_Arg *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Arg_container_get" "', argument " "1"" of type '" "_AJ_Arg *""'"); 
  }
  arg1 = (_AJ_Arg *)(argp1);
  result = (_AJ_Arg *) ((arg1)->container);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Arg, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new__AJ_Arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_Arg *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new__AJ_Arg.");
  result = (_AJ_Arg *)new _AJ_Arg();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_Arg, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete__AJ_Arg(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete__AJ_Arg(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete__AJ_Arg(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete__AJ_Arg(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_Arg * arg1 = (_AJ_Arg *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_AJ_MsgHeader_endianess_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_endianess_set" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MsgHeader_endianess_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  if (arg1) (arg1)->endianess = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MsgHeader_endianess_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_endianess_get" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  result = (char) ((arg1)->endianess);
  jsresult = SWIG_From_char((char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_MsgHeader_msgType_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_msgType_set" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MsgHeader_msgType_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->msgType = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MsgHeader_msgType_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_msgType_get" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  result =  ((arg1)->msgType);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_MsgHeader_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_flags_set" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MsgHeader_flags_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MsgHeader_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_flags_get" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_MsgHeader_majorVersion_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_majorVersion_set" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MsgHeader_majorVersion_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->majorVersion = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MsgHeader_majorVersion_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_majorVersion_get" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  result =  ((arg1)->majorVersion);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_MsgHeader_bodyLen_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_bodyLen_set" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MsgHeader_bodyLen_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->bodyLen = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MsgHeader_bodyLen_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_bodyLen_get" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  result =  ((arg1)->bodyLen);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_MsgHeader_serialNum_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_serialNum_set" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MsgHeader_serialNum_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->serialNum = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MsgHeader_serialNum_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_serialNum_get" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  result =  ((arg1)->serialNum);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_MsgHeader_headerLen_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_headerLen_set" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MsgHeader_headerLen_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->headerLen = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_MsgHeader_headerLen_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_MsgHeader *arg1 = (_AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MsgHeader_headerLen_get" "', argument " "1"" of type '" "_AJ_MsgHeader *""'"); 
  }
  arg1 = (_AJ_MsgHeader *)(argp1);
  result =  ((arg1)->headerLen);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_MsgHeader(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_MsgHeader *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_MsgHeader.");
  result = (_AJ_MsgHeader *)new _AJ_MsgHeader();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_MsgHeader, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_MsgHeader(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_MsgHeader(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_MsgHeader(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_MsgHeader(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_MsgHeader * arg1 = (_AJ_MsgHeader *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap__AJ_Message_msgId_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_msgId_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Message_msgId_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->msgId = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_msgId_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_msgId_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result =  ((arg1)->msgId);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_hdr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  AJ_MsgHeader *arg2 = (AJ_MsgHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_hdr_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_MsgHeader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Message_hdr_set" "', argument " "2"" of type '" "AJ_MsgHeader *""'"); 
  }
  arg2 = (AJ_MsgHeader *)(argp2);
  if (arg1) (arg1)->hdr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_hdr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_MsgHeader *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_hdr_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result = (AJ_MsgHeader *) ((arg1)->hdr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_MsgHeader, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_iface_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_iface_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Message_iface_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->iface = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->iface = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_iface_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_iface_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result = (char *) ((arg1)->iface);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_sender_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_sender_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Message_sender_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->sender = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->sender = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_sender_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_sender_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result = (char *) ((arg1)->sender);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_destination_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_destination_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Message_destination_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->destination = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->destination = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_destination_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_destination_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result = (char *) ((arg1)->destination);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_signature_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_signature_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Message_signature_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->signature = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->signature = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_signature_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_signature_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result = (char *) ((arg1)->signature);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_sessionId_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_sessionId_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Message_sessionId_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->sessionId = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_sessionId_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_sessionId_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result =  ((arg1)->sessionId);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_timestamp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_timestamp_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Message_timestamp_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->timestamp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_timestamp_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_timestamp_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result =  ((arg1)->timestamp);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_ttl_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_ttl_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Message_ttl_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->ttl = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_ttl_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_ttl_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result =  ((arg1)->ttl);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_sigOffset_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_sigOffset_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Message_sigOffset_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->sigOffset = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_sigOffset_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_sigOffset_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result =  ((arg1)->sigOffset);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_varOffset_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_varOffset_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Message_varOffset_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->varOffset = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_varOffset_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_varOffset_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result =  ((arg1)->varOffset);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_bodyBytes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_bodyBytes_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_AJ_Message_bodyBytes_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->bodyBytes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_bodyBytes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_bodyBytes_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result =  ((arg1)->bodyBytes);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_bus_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  AJ_BusAttachment *arg2 = (AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_bus_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_BusAttachment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Message_bus_set" "', argument " "2"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg2 = (AJ_BusAttachment *)(argp2);
  if (arg1) (arg1)->bus = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_bus_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_BusAttachment *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_bus_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result = (AJ_BusAttachment *) ((arg1)->bus);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap__AJ_Message_outer_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  _AJ_Arg *arg2 = (_AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_outer_set" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_Arg, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_Message_outer_set" "', argument " "2"" of type '" "_AJ_Arg *""'"); 
  }
  arg2 = (_AJ_Arg *)(argp2);
  if (arg1) (arg1)->outer = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap__AJ_Message_outer_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Message *arg1 = (_AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  _AJ_Arg *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_Message_outer_get" "', argument " "1"" of type '" "_AJ_Message *""'"); 
  }
  arg1 = (_AJ_Message *)(argp1);
  result = (_AJ_Arg *) ((arg1)->outer);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Arg, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new__AJ_Message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_Message *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new__AJ_Message.");
  result = (_AJ_Message *)new _AJ_Message();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_Message, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete__AJ_Message(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete__AJ_Message(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete__AJ_Message(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete__AJ_Message(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_Message * arg1 = (_AJ_Message *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_UnmarshalMsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalMsg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalMsg" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalMsg" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_UnmarshalMsg" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = (AJ_Status)AJ_UnmarshalMsg(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_UnmarshalArg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Arg *arg2 = (AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalArg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalArg" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalArg" "', argument " "2"" of type '" "AJ_Arg *""'"); 
  }
  arg2 = (AJ_Arg *)(argp2);
  result = (AJ_Status)AJ_UnmarshalArg(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_SkipArg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_SkipArg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SkipArg" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_SkipArg(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ResetArgs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ResetArgs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ResetArgs" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_ResetArgs(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_UnmarshalArgs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalArgs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalArgs" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalArgs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (AJ_Status)AJ_UnmarshalArgs(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_UnmarshalRaw(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void **arg2 = (void **) 0 ;
  size_t arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalRaw.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalRaw" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalRaw" "', argument " "2"" of type '" "void const **""'"); 
  }
  arg2 = (void **)(argp2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_UnmarshalRaw" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_UnmarshalRaw" "', argument " "4"" of type '" "size_t *""'"); 
  }
  arg4 = (size_t *)(argp4);
  result = (AJ_Status)AJ_UnmarshalRaw(arg1,(void const **)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_UnmarshalContainer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Arg *arg2 = (AJ_Arg *) 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalContainer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalContainer" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalContainer" "', argument " "2"" of type '" "AJ_Arg *""'"); 
  }
  arg2 = (AJ_Arg *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_UnmarshalContainer" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  result = (AJ_Status)AJ_UnmarshalContainer(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_UnmarshalCloseContainer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Arg *arg2 = (AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalCloseContainer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalCloseContainer" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalCloseContainer" "', argument " "2"" of type '" "AJ_Arg *""'"); 
  }
  arg2 = (AJ_Arg *)(argp2);
  result = (AJ_Status)AJ_UnmarshalCloseContainer(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_UnmarshalVariant(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalVariant.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalVariant" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalVariant" "', argument " "2"" of type '" "char const **""'"); 
  }
  arg2 = (char **)(argp2);
  result = (AJ_Status)AJ_UnmarshalVariant(arg1,(char const **)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_CloseMsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_CloseMsg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_CloseMsg" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_CloseMsg(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalMethodCall(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  AJ_SessionId arg5 ;
  uint8_t arg6 ;
  uint32_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned long val7 ;
  int ecode7 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalMethodCall.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalMethodCall" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalMethodCall" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_MarshalMethodCall" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_MarshalMethodCall" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AJ_MarshalMethodCall" "', argument " "5"" of type '" "AJ_SessionId""'");
  } 
  arg5 = (AJ_SessionId)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AJ_MarshalMethodCall" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = (uint8_t)(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AJ_MarshalMethodCall" "', argument " "7"" of type '" "uint32_t""'");
  } 
  arg7 = (uint32_t)(val7);
  result = (AJ_Status)AJ_MarshalMethodCall(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalSignal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  AJ_SessionId arg5 ;
  uint8_t arg6 ;
  uint32_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned long val7 ;
  int ecode7 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalSignal.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalSignal" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalSignal" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_MarshalSignal" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_MarshalSignal" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AJ_MarshalSignal" "', argument " "5"" of type '" "AJ_SessionId""'");
  } 
  arg5 = (AJ_SessionId)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AJ_MarshalSignal" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = (uint8_t)(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AJ_MarshalSignal" "', argument " "7"" of type '" "uint32_t""'");
  } 
  arg7 = (uint32_t)(val7);
  result = (AJ_Status)AJ_MarshalSignal(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalReplyMsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalReplyMsg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalReplyMsg" "', argument " "1"" of type '" "AJ_Message const *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalReplyMsg" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  result = (AJ_Status)AJ_MarshalReplyMsg((_AJ_Message const *)arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalErrorMsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalErrorMsg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalErrorMsg" "', argument " "1"" of type '" "AJ_Message const *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalErrorMsg" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_MarshalErrorMsg" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (AJ_Status)AJ_MarshalErrorMsg((_AJ_Message const *)arg1,arg2,(char const *)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalStatusMsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  AJ_Status arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalStatusMsg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalStatusMsg" "', argument " "1"" of type '" "AJ_Message const *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalStatusMsg" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_MarshalStatusMsg" "', argument " "3"" of type '" "AJ_Status""'");
  } 
  arg3 = (AJ_Status)(val3);
  result = (AJ_Status)AJ_MarshalStatusMsg((_AJ_Message const *)arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DeliverMsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_DeliverMsg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_DeliverMsg" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_DeliverMsg(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DeliverMsgPartial(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_DeliverMsgPartial.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_DeliverMsgPartial" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_DeliverMsgPartial" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = (AJ_Status)AJ_DeliverMsgPartial(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalArgs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalArgs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalArgs" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalArgs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (AJ_Status)AJ_MarshalArgs(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InitArg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Arg *arg1 = (AJ_Arg *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *arg4 = (void *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int res4 ;
  size_t val5 ;
  int ecode5 = 0 ;
  AJ_Arg *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InitArg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InitArg" "', argument " "1"" of type '" "AJ_Arg *""'"); 
  }
  arg1 = (AJ_Arg *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_InitArg" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_InitArg" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  res4 = SWIG_ConvertPtr(args[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_InitArg" "', argument " "4"" of type '" "void const *""'"); 
  }
  ecode5 = SWIG_AsVal_size_t(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AJ_InitArg" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = (size_t)(val5);
  result = (AJ_Arg *)AJ_InitArg(arg1,arg2,arg3,(void const *)arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Arg, 0 |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalArg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Arg *arg2 = (AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalArg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalArg" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalArg" "', argument " "2"" of type '" "AJ_Arg *""'"); 
  }
  arg2 = (AJ_Arg *)(argp2);
  result = (AJ_Status)AJ_MarshalArg(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalRaw(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalRaw.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalRaw" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalRaw" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_MarshalRaw" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = (AJ_Status)AJ_MarshalRaw(arg1,(void const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalContainer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Arg *arg2 = (AJ_Arg *) 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalContainer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalContainer" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalContainer" "', argument " "2"" of type '" "AJ_Arg *""'"); 
  }
  arg2 = (AJ_Arg *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_MarshalContainer" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  result = (AJ_Status)AJ_MarshalContainer(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalCloseContainer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Arg *arg2 = (AJ_Arg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalCloseContainer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalCloseContainer" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Arg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalCloseContainer" "', argument " "2"" of type '" "AJ_Arg *""'"); 
  }
  arg2 = (AJ_Arg *)(argp2);
  result = (AJ_Status)AJ_MarshalCloseContainer(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalVariant(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalVariant.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalVariant" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalVariant" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (AJ_Status)AJ_MarshalVariant(arg1,(char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap__AJ_DumpMsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  uint8_t arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap__AJ_DumpMsg.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_DumpMsg" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_DumpMsg" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_AJ_DumpMsg" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  _AJ_DumpMsg((char const *)arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap__AJ_DumpBytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap__AJ_DumpBytes.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_DumpBytes" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_DumpBytes" "', argument " "2"" of type '" "uint8_t const *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_AJ_DumpBytes" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  _AJ_DumpBytes((char const *)arg1,(uint8_t const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DEBUG_OFF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_DEBUG_ERROR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_DEBUG_WARN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_DEBUG_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_DEBUG_DUMP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_DEBUG_ALL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_DEBUG_RESTRICT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap__AJ_DbgEnabled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap__AJ_DbgEnabled.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_AJ_DbgEnabled" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (int)_AJ_DbgEnabled((char const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap__AJ_DbgHeader(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_DebugLevel arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap__AJ_DbgHeader.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "_AJ_DbgHeader" "', argument " "1"" of type '" "AJ_DebugLevel""'");
  } 
  arg1 = (AJ_DebugLevel)(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AJ_DbgHeader" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_AJ_DbgHeader" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)_AJ_DbgHeader(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StatusText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Status arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StatusText.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_StatusText" "', argument " "1"" of type '" "AJ_Status""'");
  } 
  arg1 = (AJ_Status)(val1);
  result = (char *)AJ_StatusText(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Initialize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Initialize.");
  
  AJ_Initialize();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DESCRIPTION_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  uint32_t result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_DESCRIPTION_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_DESCRIPTION_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_DESCRIPTION_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_DESCRIPTION_ID" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_DESCRIPTION_ID" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = (uint32_t)(val4);
  result = AJ_DESCRIPTION_ID(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DESC_ID_FROM_MSG_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  uint32_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_DESC_ID_FROM_MSG_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_DESC_ID_FROM_MSG_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_DESC_ID_FROM_MSG_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = AJ_DESC_ID_FROM_MSG_ID(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DESC_ID_FROM_PROP_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_DESC_ID_FROM_PROP_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_DESC_ID_FROM_PROP_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  result = AJ_DESC_ID_FROM_PROP_ID(arg1);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DESC_ID_FROM_OBJ_INDEX(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_DESC_ID_FROM_OBJ_INDEX.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_DESC_ID_FROM_OBJ_INDEX" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  result = AJ_DESC_ID_FROM_OBJ_INDEX(arg1);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_DESC_ID_FROM_INTERFACE_INDEX(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  uint32_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_DESC_ID_FROM_INTERFACE_INDEX.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_DESC_ID_FROM_INTERFACE_INDEX" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_DESC_ID_FROM_INTERFACE_INDEX" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = AJ_DESC_ID_FROM_INTERFACE_INDEX(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BUS_MESSAGE_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  uint32_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BUS_MESSAGE_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_BUS_MESSAGE_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BUS_MESSAGE_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BUS_MESSAGE_ID" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = AJ_BUS_MESSAGE_ID(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_APP_MESSAGE_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  uint32_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_APP_MESSAGE_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_APP_MESSAGE_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_APP_MESSAGE_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_APP_MESSAGE_ID" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = AJ_APP_MESSAGE_ID(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_PRX_MESSAGE_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  uint32_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_PRX_MESSAGE_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_PRX_MESSAGE_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_PRX_MESSAGE_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_PRX_MESSAGE_ID" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = AJ_PRX_MESSAGE_ID(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_BUS_PROPERTY_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  uint32_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_BUS_PROPERTY_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_BUS_PROPERTY_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_BUS_PROPERTY_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_BUS_PROPERTY_ID" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = AJ_BUS_PROPERTY_ID(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_APP_PROPERTY_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  uint32_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_APP_PROPERTY_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_APP_PROPERTY_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_APP_PROPERTY_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_APP_PROPERTY_ID" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = AJ_APP_PROPERTY_ID(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_PRX_PROPERTY_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  uint32_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_PRX_PROPERTY_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_PRX_PROPERTY_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_PRX_PROPERTY_ID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_PRX_PROPERTY_ID" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = AJ_PRX_PROPERTY_ID(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_REPLY_ID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_REPLY_ID.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_REPLY_ID" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  result = AJ_REPLY_ID(arg1);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_INVALID_MEMBER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(AJ_INVALID_MEMBER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SIGNAL_MEMBER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)(AJ_SIGNAL_MEMBER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_METHOD_MEMBER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)(AJ_METHOD_MEMBER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PROPERTY_MEMBER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_char((char)(AJ_PROPERTY_MEMBER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OBJ_FLAG_SECURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OBJ_FLAG_HIDDEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OBJ_FLAG_DISABLED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OBJ_FLAG_ANNOUNCED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OBJ_FLAG_IS_PROXY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OBJ_FLAG_DESCRIBED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_OBJ_FLAGS_ALL_INCLUDE_MASK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xFF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Object_path_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_path_set" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_Object_path_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->path = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->path = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Object_path_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_path_get" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  result = (char *) ((arg1)->path);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Object_interfaces_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  AJ_InterfaceDescription *arg2 = (AJ_InterfaceDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_interfaces_set" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_Object_interfaces_set" "', argument " "2"" of type '" "AJ_InterfaceDescription const *""'"); 
  }
  arg2 = (AJ_InterfaceDescription *)(argp2);
  if (arg1) (arg1)->interfaces = (AJ_InterfaceDescription const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Object_interfaces_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_InterfaceDescription *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_interfaces_get" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  result = (AJ_InterfaceDescription *) ((arg1)->interfaces);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Object_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_flags_set" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_Object_flags_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Object_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_flags_get" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_Object_context_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_context_set" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_Object_context_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->context = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_Object_context_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  _AJ_Object *arg1 = (_AJ_Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Object_context_get" "', argument " "1"" of type '" "_AJ_Object *""'"); 
  }
  arg1 = (_AJ_Object *)(argp1);
  result = (void *) ((arg1)->context);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_Object(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  _AJ_Object *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_Object.");
  result = (_AJ_Object *)new _AJ_Object();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p__AJ_Object, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_Object(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_Object(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_Object(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_Object(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          _AJ_Object * arg1 = (_AJ_Object *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_ROOT_OBJECT_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *result = 0 ;
  
  result = (AJ_Object *)&AJ_ROOT_OBJECT;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Object, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BUS_ID_FLAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x00));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_APP_ID_FLAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PRX_ID_FLAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_REP_ID_FLAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x80));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_RegisterObjectList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_RegisterObjectList.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_RegisterObjectList" "', argument " "1"" of type '" "AJ_Object const *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_RegisterObjectList" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  result = (AJ_Status)AJ_RegisterObjectList((_AJ_Object const *)arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_RegisterObjectListWithDescriptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  uint8_t arg2 ;
  AJ_DescriptionLookupFunc arg3 = (AJ_DescriptionLookupFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_RegisterObjectListWithDescriptions.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_RegisterObjectListWithDescriptions" "', argument " "1"" of type '" "AJ_Object const *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_RegisterObjectListWithDescriptions" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    int res = SWIG_ConvertFunctionPtr(args[2], (void**)(&arg3), SWIGTYPE_p_f_uint32_t_p_q_const__char__p_char);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_RegisterObjectListWithDescriptions" "', argument " "3"" of type '" "AJ_DescriptionLookupFunc""'"); 
    }
  }
  result = (AJ_Status)AJ_RegisterObjectListWithDescriptions((_AJ_Object const *)arg1,arg2,(char const *(*)(uint32_t,char const *))arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_RegisterDescriptionLanguages(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_RegisterDescriptionLanguages.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_RegisterDescriptionLanguages" "', argument " "1"" of type '" "char const *const *""'"); 
  }
  arg1 = (char **)(argp1);
  AJ_RegisterDescriptionLanguages((char const *const *)arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_RegisterObjects(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  AJ_Object *arg2 = (AJ_Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_RegisterObjects.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_RegisterObjects" "', argument " "1"" of type '" "AJ_Object const *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_RegisterObjects" "', argument " "2"" of type '" "AJ_Object const *""'"); 
  }
  arg2 = (AJ_Object *)(argp2);
  AJ_RegisterObjects((_AJ_Object const *)arg1,(_AJ_Object const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_AJ_ObjectIterator_fin_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_fin_set" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_ObjectIterator_fin_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->fin = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_ObjectIterator_fin_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_fin_get" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  result =  ((arg1)->fin);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_ObjectIterator_fex_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_fex_set" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_ObjectIterator_fex_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->fex = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_ObjectIterator_fex_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_fex_get" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  result =  ((arg1)->fex);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_ObjectIterator_l_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_l_set" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_ObjectIterator_l_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->l = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_ObjectIterator_l_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_l_get" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  result =  ((arg1)->l);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AJ_ObjectIterator_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_n_set" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_ObjectIterator_n_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->n = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AJ_ObjectIterator_n_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectIterator_n_get" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  result =  ((arg1)->n);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AJ_ObjectIterator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  AJ_ObjectIterator *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AJ_ObjectIterator.");
  result = (AJ_ObjectIterator *)new AJ_ObjectIterator();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_AJ_ObjectIterator, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AJ_ObjectIterator(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AJ_ObjectIterator(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AJ_ObjectIterator(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AJ_ObjectIterator(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          AJ_ObjectIterator * arg1 = (AJ_ObjectIterator *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_InitObjectIterator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  AJ_Object *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InitObjectIterator.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InitObjectIterator" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_InitObjectIterator" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_InitObjectIterator" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  result = (AJ_Object *)AJ_InitObjectIterator(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Object, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_NextObject(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_ObjectIterator *arg1 = (AJ_ObjectIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Object *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_NextObject.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_AJ_ObjectIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_NextObject" "', argument " "1"" of type '" "AJ_ObjectIterator *""'"); 
  }
  arg1 = (AJ_ObjectIterator *)(argp1);
  result = (AJ_Object *)AJ_NextObject(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Object, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InterfacesCreate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_InterfaceDescription *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InterfacesCreate.");
  
  result = (AJ_InterfaceDescription *)AJ_InterfacesCreate();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_char, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InterfacesAdd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_InterfaceDescription *arg1 = (AJ_InterfaceDescription *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_InterfaceDescription *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InterfacesAdd.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InterfacesAdd" "', argument " "1"" of type '" "AJ_InterfaceDescription *""'"); 
  }
  arg1 = (AJ_InterfaceDescription *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_InterfacesAdd" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = (char **)(argp2);
  result = (AJ_InterfaceDescription *)AJ_InterfacesAdd((char const *const **)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_char, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InterfacesDelete(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_InterfaceDescription *arg1 = (AJ_InterfaceDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InterfacesDelete.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InterfacesDelete" "', argument " "1"" of type '" "AJ_InterfaceDescription *""'"); 
  }
  arg1 = (AJ_InterfaceDescription *)(argp1);
  result = (AJ_Status)AJ_InterfacesDelete((char const *const **)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InterfaceDescriptionCreate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char **result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InterfaceDescriptionCreate.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InterfaceDescriptionCreate" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = (char *)(buf1);
  result = (char **)AJ_InterfaceDescriptionCreate(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InterfaceDescriptionAdd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char **result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InterfaceDescriptionAdd.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InterfaceDescriptionAdd" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = (char **)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_InterfaceDescriptionAdd" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  result = (char **)AJ_InterfaceDescriptionAdd(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InterfaceDescriptionDelete(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InterfaceDescriptionDelete.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InterfaceDescriptionDelete" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = (char **)(argp1);
  result = (AJ_Status)AJ_InterfaceDescriptionDelete(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ObjectsCreate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ObjectsCreate.");
  
  result = (AJ_Object *)AJ_ObjectsCreate();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Object, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ObjectsAdd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  AJ_Object arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  AJ_Object *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ObjectsAdd.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ObjectsAdd" "', argument " "1"" of type '" "AJ_Object *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p__AJ_Object,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_ObjectsAdd" "', argument " "2"" of type '" "AJ_Object""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AJ_ObjectsAdd" "', argument " "2"" of type '" "AJ_Object""'");
    } else {
      arg2 = *((AJ_Object *)(argp2));
    }
  }
  result = (AJ_Object *)AJ_ObjectsAdd(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Object, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_IdentifyMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_IdentifyMessage.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IdentifyMessage" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_IdentifyMessage(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_UnmarshalPropertyArgs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_UnmarshalPropertyArgs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_UnmarshalPropertyArgs" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_UnmarshalPropertyArgs" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = (uint32_t *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_UnmarshalPropertyArgs" "', argument " "3"" of type '" "char const **""'"); 
  }
  arg3 = (char **)(argp3);
  result = (AJ_Status)AJ_UnmarshalPropertyArgs(arg1,arg2,(char const **)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalPropertyArgs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalPropertyArgs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalPropertyArgs" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_MarshalPropertyArgs" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = (AJ_Status)AJ_MarshalPropertyArgs(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_MarshalAllPropertiesArgs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  char *arg2 = (char *) 0 ;
  AJ_BusPropGetCallback arg3 = (AJ_BusPropGetCallback) 0 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_MarshalAllPropertiesArgs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_MarshalAllPropertiesArgs" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_MarshalAllPropertiesArgs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    int res = SWIG_ConvertFunctionPtr(args[2], (void**)(&arg3), SWIGTYPE_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_MarshalAllPropertiesArgs" "', argument " "3"" of type '" "AJ_BusPropGetCallback""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(args[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_MarshalAllPropertiesArgs" "', argument " "4"" of type '" "void *""'"); 
  }
  result = (AJ_Status)AJ_MarshalAllPropertiesArgs(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_HandleIntrospectRequest(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_HandleIntrospectRequest.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_HandleIntrospectRequest" "', argument " "1"" of type '" "AJ_Message const *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_HandleIntrospectRequest" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_HandleIntrospectRequest" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (AJ_Status)AJ_HandleIntrospectRequest((_AJ_Message const *)arg1,arg2,(char const *)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_HandleGetDescriptionLanguages(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_HandleGetDescriptionLanguages.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_HandleGetDescriptionLanguages" "', argument " "1"" of type '" "AJ_Message const *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_HandleGetDescriptionLanguages" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  result = (AJ_Status)AJ_HandleGetDescriptionLanguages((_AJ_Message const *)arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InitMessageFromMsgId(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  uint32_t arg2 ;
  uint8_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InitMessageFromMsgId.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_InitMessageFromMsgId" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_InitMessageFromMsgId" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_InitMessageFromMsgId" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_InitMessageFromMsgId" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = (uint8_t *)(argp4);
  result = (AJ_Status)AJ_InitMessageFromMsgId(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_SetProxyObjectPath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_SetProxyObjectPath.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SetProxyObjectPath" "', argument " "1"" of type '" "AJ_Object *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_SetProxyObjectPath" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_SetProxyObjectPath" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (AJ_Status)AJ_SetProxyObjectPath(arg1,arg2,(char const *)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AllocReplyContext(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AllocReplyContext.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AllocReplyContext" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_AllocReplyContext" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  result = (AJ_Status)AJ_AllocReplyContext(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ReleaseReplyContexts(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ReleaseReplyContexts.");
  
  AJ_ReleaseReplyContexts();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_TimedOutMethodCall(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_TimedOutMethodCall.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_TimedOutMethodCall" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = AJ_TimedOutMethodCall(arg1);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_ReleaseReplyContext(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_ReleaseReplyContext.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_ReleaseReplyContext" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  AJ_ReleaseReplyContext(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_SetObjectFlags(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_SetObjectFlags.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_SetObjectFlags" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_SetObjectFlags" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_SetObjectFlags" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  result = (AJ_Status)AJ_SetObjectFlags((char const *)arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_GetMemberType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  char **arg2 = (char **) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  AJ_MemberType result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetMemberType.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_GetMemberType" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_GetMemberType" "', argument " "2"" of type '" "char const **""'"); 
  }
  arg2 = (char **)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_GetMemberType" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = (uint8_t *)(argp3);
  result = (AJ_MemberType)AJ_GetMemberType(arg1,(char const **)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_PrintXML(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_PrintXML.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_PrintXML" "', argument " "1"" of type '" "AJ_Object const *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  AJ_PrintXML((_AJ_Object const *)arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_PrintXMLWithDescriptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_PrintXMLWithDescriptions.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_PrintXMLWithDescriptions" "', argument " "1"" of type '" "AJ_Object const *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_PrintXMLWithDescriptions" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  AJ_PrintXMLWithDescriptions((_AJ_Object const *)arg1,(char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_INVALID_MSG_ID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((0xFFFFFFFF)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_INVALID_PROP_ID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((0xFFFFFFFF)));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_DBusDestination_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_DBusDestination;
  {
    size_t size = SWIG_strnlen(result, 21);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_BusDestination_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_BusDestination;
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrSecurityViolation_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrSecurityViolation;
  {
    size_t size = SWIG_strnlen(result, 34);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrTimeout_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrTimeout;
  {
    size_t size = SWIG_strnlen(result, 24);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrRejected_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrRejected;
  {
    size_t size = SWIG_strnlen(result, 25);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrResources_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrResources;
  {
    size_t size = SWIG_strnlen(result, 26);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrServiceUnknown_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrServiceUnknown;
  {
    size_t size = SWIG_strnlen(result, 42);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrUpdateNotAllowed_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrUpdateNotAllowed;
  {
    size_t size = SWIG_strnlen(result, 35);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrInvalidValue_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrInvalidValue;
  {
    size_t size = SWIG_strnlen(result, 31);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrFeatureNotAvailable_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrFeatureNotAvailable;
  {
    size_t size = SWIG_strnlen(result, 38);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrMaxSizeExceeded_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrMaxSizeExceeded;
  {
    size_t size = SWIG_strnlen(result, 34);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_ErrLanguageNotSuppored_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AJ_ErrLanguageNotSuppored;
  {
    size_t size = SWIG_strnlen(result, 39);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PropertiesIface_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **result = 0 ;
  
  result = (char **)(char **)AJ_PropertiesIface;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DBusPeerInterface_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)DBusPeerInterface;
  {
    size_t size = SWIG_strnlen(result, 27);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PROP_GET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PROP_SET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_PROP_GET_ALL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_IntrospectionIface_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **result = 0 ;
  
  result = (char **)(char **)AJ_IntrospectionIface;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AllSeenIntrospectableInterface_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)(char *)AllSeenIntrospectableInterface;
  {
    size_t size = SWIG_strnlen(result, 28);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_AllSeenIntrospectionIface_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **result = 0 ;
  
  result = (char **)(char **)AJ_AllSeenIntrospectionIface;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_StandardObjects_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *result = 0 ;
  
  result = (AJ_Object *)(AJ_Object *)AJ_StandardObjects;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_Object, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_SetMinProtoVersion(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_SetMinProtoVersion.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_SetMinProtoVersion" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = (uint8_t)(val1);
  AJ_SetMinProtoVersion(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_GetMinProtoVersion(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetMinProtoVersion.");
  
  result = AJ_GetMinProtoVersion();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_GetRoutingProtoVersion(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_GetRoutingProtoVersion.");
  
  result = AJ_GetRoutingProtoVersion();
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Authenticate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Authenticate.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Authenticate" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  result = (AJ_Status)AJ_Authenticate(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Connect(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Connect.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Connect" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_Connect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_Connect" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = (AJ_Status)AJ_Connect(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_FindBusAndConnect(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_FindBusAndConnect.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_FindBusAndConnect" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_FindBusAndConnect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_FindBusAndConnect" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  result = (AJ_Status)AJ_FindBusAndConnect(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_Disconnect(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_Disconnect.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_Disconnect" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  AJ_Disconnect(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SetBusAuthPwdCallback(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  BusAuthPwdFunc arg1 = (BusAuthPwdFunc) 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SetBusAuthPwdCallback.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_p_uint8_t_uint32_t__uint32_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "SetBusAuthPwdCallback" "', argument " "1"" of type '" "BusAuthPwdFunc""'"); 
    }
  }
  SetBusAuthPwdCallback(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_IsRoutingNodeBlacklisted(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Service *arg1 = (AJ_Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_IsRoutingNodeBlacklisted.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_AJ_Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_IsRoutingNodeBlacklisted" "', argument " "1"" of type '" "AJ_Service *""'"); 
  }
  arg1 = (AJ_Service *)(argp1);
  result = AJ_IsRoutingNodeBlacklisted(arg1);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_InitRoutingNodeBlacklist(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_InitRoutingNodeBlacklist.");
  
  AJ_InitRoutingNodeBlacklist();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutRegisterPropStoreGetter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_AboutPropGetter arg1 = (AJ_AboutPropGetter) 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutRegisterPropStoreGetter.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_p__AJ_Message_p_q_const__char__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_AboutRegisterPropStoreGetter" "', argument " "1"" of type '" "AJ_AboutPropGetter""'"); 
    }
  }
  AJ_AboutRegisterPropStoreGetter(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutInit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutInit.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutInit" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_AboutInit" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  result = (AJ_Status)AJ_AboutInit(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutAnnounce(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutAnnounce.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutAnnounce" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  result = (AJ_Status)AJ_AboutAnnounce(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutSetIcon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint16_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutSetIcon.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutSetIcon" "', argument " "1"" of type '" "uint8_t const *""'"); 
  }
  arg1 = (uint8_t *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AJ_AboutSetIcon" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_AboutSetIcon" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AJ_AboutSetIcon" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  AJ_AboutSetIcon((uint8_t const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutHandleGetProp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutHandleGetProp.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutHandleGetProp" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_AboutHandleGetProp(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutHandleGetAboutData(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutHandleGetAboutData.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutHandleGetAboutData" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_AboutHandleGetAboutData" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  result = (AJ_Status)AJ_AboutHandleGetAboutData(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutHandleGetObjectDescription(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutHandleGetObjectDescription.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutHandleGetObjectDescription" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_AboutHandleGetObjectDescription" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  result = (AJ_Status)AJ_AboutHandleGetObjectDescription(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutIconHandleGetProp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutIconHandleGetProp.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutIconHandleGetProp" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  result = (AJ_Status)AJ_AboutIconHandleGetProp(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutIconHandleGetURL(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutIconHandleGetURL.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutIconHandleGetURL" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_AboutIconHandleGetURL" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  result = (AJ_Status)AJ_AboutIconHandleGetURL(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutIconHandleGetContent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Message *arg1 = (AJ_Message *) 0 ;
  AJ_Message *arg2 = (AJ_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutIconHandleGetContent.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutIconHandleGetContent" "', argument " "1"" of type '" "AJ_Message *""'"); 
  }
  arg1 = (AJ_Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p__AJ_Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_AboutIconHandleGetContent" "', argument " "2"" of type '" "AJ_Message *""'"); 
  }
  arg2 = (AJ_Message *)(argp2);
  result = (AJ_Status)AJ_AboutIconHandleGetContent(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutSetShouldAnnounce(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutSetShouldAnnounce.");
  
  AJ_AboutSetShouldAnnounce();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_AboutSetAnnounceObjects(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_Object *arg1 = (AJ_Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_AboutSetAnnounceObjects.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_AboutSetAnnounceObjects" "', argument " "1"" of type '" "AJ_Object *""'"); 
  }
  arg1 = (AJ_Object *)(argp1);
  AJ_AboutSetAnnounceObjects(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_NO_SESSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_UNREACHABLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_CONNECT_FAILED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_REJECTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_BAD_SESSION_OPTS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_ALREADY_JOINED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(7));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AJ_JOINSESSION_REPLY_FAILED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_MessageHandlerEntry_msgid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  MessageHandlerEntry *arg1 = (MessageHandlerEntry *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MessageHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageHandlerEntry_msgid_set" "', argument " "1"" of type '" "MessageHandlerEntry *""'"); 
  }
  arg1 = (MessageHandlerEntry *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageHandlerEntry_msgid_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->msgid = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_MessageHandlerEntry_msgid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  MessageHandlerEntry *arg1 = (MessageHandlerEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MessageHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageHandlerEntry_msgid_get" "', argument " "1"" of type '" "MessageHandlerEntry *""'"); 
  }
  arg1 = (MessageHandlerEntry *)(argp1);
  result =  ((arg1)->msgid);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_MessageHandlerEntry_handler_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  MessageHandlerEntry *arg1 = (MessageHandlerEntry *) 0 ;
  MessageHandler arg2 = (MessageHandler) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MessageHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageHandlerEntry_handler_set" "', argument " "1"" of type '" "MessageHandlerEntry *""'"); 
  }
  arg1 = (MessageHandlerEntry *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p__AJ_Message_p__AJ_Message__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MessageHandlerEntry_handler_set" "', argument " "2"" of type '" "MessageHandler""'"); 
    }
  }
  if (arg1) (arg1)->handler = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_MessageHandlerEntry_handler_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  MessageHandlerEntry *arg1 = (MessageHandlerEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MessageHandler result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MessageHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageHandlerEntry_handler_get" "', argument " "1"" of type '" "MessageHandlerEntry *""'"); 
  }
  arg1 = (MessageHandlerEntry *)(argp1);
  result = (MessageHandler) ((arg1)->handler);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p__AJ_Message_p__AJ_Message__AJ_Status);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_MessageHandlerEntry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  MessageHandlerEntry *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MessageHandlerEntry.");
  result = (MessageHandlerEntry *)new MessageHandlerEntry();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_MessageHandlerEntry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_MessageHandlerEntry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_MessageHandlerEntry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_MessageHandlerEntry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_MessageHandlerEntry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          MessageHandlerEntry * arg1 = (MessageHandlerEntry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_PropHandlerEntry_msgid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  PropHandlerEntry *arg1 = (PropHandlerEntry *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_PropHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropHandlerEntry_msgid_set" "', argument " "1"" of type '" "PropHandlerEntry *""'"); 
  }
  arg1 = (PropHandlerEntry *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PropHandlerEntry_msgid_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->msgid = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_PropHandlerEntry_msgid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  PropHandlerEntry *arg1 = (PropHandlerEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_PropHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropHandlerEntry_msgid_get" "', argument " "1"" of type '" "PropHandlerEntry *""'"); 
  }
  arg1 = (PropHandlerEntry *)(argp1);
  result =  ((arg1)->msgid);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_PropHandlerEntry_callback_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  PropHandlerEntry *arg1 = (PropHandlerEntry *) 0 ;
  AJ_BusPropGetCallback arg2 = (AJ_BusPropGetCallback) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_PropHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropHandlerEntry_callback_set" "', argument " "1"" of type '" "PropHandlerEntry *""'"); 
  }
  arg1 = (PropHandlerEntry *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "PropHandlerEntry_callback_set" "', argument " "2"" of type '" "AJ_BusPropGetCallback""'"); 
    }
  }
  if (arg1) (arg1)->callback = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_PropHandlerEntry_callback_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  PropHandlerEntry *arg1 = (PropHandlerEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_BusPropGetCallback result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_PropHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropHandlerEntry_callback_get" "', argument " "1"" of type '" "PropHandlerEntry *""'"); 
  }
  arg1 = (PropHandlerEntry *)(argp1);
  result = (AJ_BusPropGetCallback) ((arg1)->callback);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_PropHandlerEntry_context_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  PropHandlerEntry *arg1 = (PropHandlerEntry *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_PropHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropHandlerEntry_context_set" "', argument " "1"" of type '" "PropHandlerEntry *""'"); 
  }
  arg1 = (PropHandlerEntry *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropHandlerEntry_context_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->context = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_PropHandlerEntry_context_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  PropHandlerEntry *arg1 = (PropHandlerEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_PropHandlerEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropHandlerEntry_context_get" "', argument " "1"" of type '" "PropHandlerEntry *""'"); 
  }
  arg1 = (PropHandlerEntry *)(argp1);
  result = (void *) ((arg1)->context);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_PropHandlerEntry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  PropHandlerEntry *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PropHandlerEntry.");
  result = (PropHandlerEntry *)new PropHandlerEntry();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_PropHandlerEntry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_PropHandlerEntry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_PropHandlerEntry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_PropHandlerEntry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_PropHandlerEntry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          PropHandlerEntry * arg1 = (PropHandlerEntry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_AllJoynConfiguration_daemonName_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_daemonName_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AllJoynConfiguration_daemonName_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->daemonName = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->daemonName = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_daemonName_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_daemonName_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (char *) ((arg1)->daemonName);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_connect_timeout_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_connect_timeout_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AllJoynConfiguration_connect_timeout_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->connect_timeout = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_connect_timeout_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_connect_timeout_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result =  ((arg1)->connect_timeout);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_connected_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_connected_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AllJoynConfiguration_connected_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->connected = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_connected_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_connected_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result =  ((arg1)->connected);
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_session_port_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_session_port_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AllJoynConfiguration_session_port_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  if (arg1) (arg1)->session_port = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_session_port_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_session_port_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result =  ((arg1)->session_port);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_service_name_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_service_name_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AllJoynConfiguration_service_name_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->service_name = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->service_name = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_service_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_service_name_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (char *) ((arg1)->service_name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_flags_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AllJoynConfiguration_flags_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_flags_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_opts_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  AJ_SessionOpts *arg2 = (AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_opts_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__AJ_SessionOpts, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AllJoynConfiguration_opts_set" "', argument " "2"" of type '" "AJ_SessionOpts const *""'"); 
  }
  arg2 = (AJ_SessionOpts *)(argp2);
  if (arg1) (arg1)->opts = (AJ_SessionOpts const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_opts_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_SessionOpts *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_opts_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (AJ_SessionOpts *) ((arg1)->opts);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_password_callback_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  AJ_AuthPwdFunc arg2 = (AJ_AuthPwdFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_password_callback_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_uint8_t_uint32_t__uint32_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AllJoynConfiguration_password_callback_set" "', argument " "2"" of type '" "AJ_AuthPwdFunc""'"); 
    }
  }
  if (arg1) (arg1)->password_callback = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_password_callback_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AJ_AuthPwdFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_password_callback_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (AJ_AuthPwdFunc) ((arg1)->password_callback);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_uint8_t_uint32_t__uint32_t);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_link_timeout_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_link_timeout_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AllJoynConfiguration_link_timeout_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = (uint32_t)(val2);
  if (arg1) (arg1)->link_timeout = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_link_timeout_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_link_timeout_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result =  ((arg1)->link_timeout);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_acceptor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  AcceptSessionHandler arg2 = (AcceptSessionHandler) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_acceptor_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p__AJ_Message__uint8_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AllJoynConfiguration_acceptor_set" "', argument " "2"" of type '" "AcceptSessionHandler""'"); 
    }
  }
  if (arg1) (arg1)->acceptor = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_acceptor_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AcceptSessionHandler result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_acceptor_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (AcceptSessionHandler) ((arg1)->acceptor);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p__AJ_Message__uint8_t);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_connection_handler_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  ConnectionHandler arg2 = (ConnectionHandler) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_connection_handler_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_uint8_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AllJoynConfiguration_connection_handler_set" "', argument " "2"" of type '" "ConnectionHandler""'"); 
    }
  }
  if (arg1) (arg1)->connection_handler = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_connection_handler_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ConnectionHandler result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_connection_handler_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (ConnectionHandler) ((arg1)->connection_handler);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_uint8_t__void);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_message_handlers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  MessageHandlerEntry *arg2 = (MessageHandlerEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_message_handlers_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_MessageHandlerEntry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AllJoynConfiguration_message_handlers_set" "', argument " "2"" of type '" "MessageHandlerEntry const *""'"); 
  }
  arg2 = (MessageHandlerEntry *)(argp2);
  if (arg1) (arg1)->message_handlers = (MessageHandlerEntry const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_message_handlers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MessageHandlerEntry *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_message_handlers_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (MessageHandlerEntry *) ((arg1)->message_handlers);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageHandlerEntry, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_AllJoynConfiguration_prop_handlers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  PropHandlerEntry *arg2 = (PropHandlerEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_prop_handlers_set" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_PropHandlerEntry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AllJoynConfiguration_prop_handlers_set" "', argument " "2"" of type '" "PropHandlerEntry const *""'"); 
  }
  arg2 = (PropHandlerEntry *)(argp2);
  if (arg1) (arg1)->prop_handlers = (PropHandlerEntry const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AllJoynConfiguration_prop_handlers_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AllJoynConfiguration *arg1 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PropHandlerEntry *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllJoynConfiguration_prop_handlers_get" "', argument " "1"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg1 = (AllJoynConfiguration *)(argp1);
  result = (PropHandlerEntry *) ((arg1)->prop_handlers);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropHandlerEntry, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AllJoynConfiguration(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  AllJoynConfiguration *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AllJoynConfiguration.");
  result = (AllJoynConfiguration *)new AllJoynConfiguration();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_AllJoynConfiguration, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AllJoynConfiguration(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AllJoynConfiguration(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AllJoynConfiguration(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AllJoynConfiguration(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          AllJoynConfiguration * arg1 = (AllJoynConfiguration *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AJ_RunAllJoynService(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  AllJoynConfiguration *arg2 = (AllJoynConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_RunAllJoynService.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_RunAllJoynService" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_AllJoynConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_RunAllJoynService" "', argument " "2"" of type '" "AllJoynConfiguration *""'"); 
  }
  arg2 = (AllJoynConfiguration *)(argp2);
  result = (AJ_Status)AJ_RunAllJoynService(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_SetTimer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  TimeoutHandler arg2 = (TimeoutHandler) 0 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int res3 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  uint32_t result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_SetTimer.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_SetTimer" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AJ_SetTimer" "', argument " "2"" of type '" "TimeoutHandler""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AJ_SetTimer" "', argument " "3"" of type '" "void *""'"); 
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_SetTimer" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = (uint32_t)(val4);
  result = AJ_SetTimer(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_long((unsigned long)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_CancelTimer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint32_t arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_CancelTimer.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AJ_CancelTimer" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = (uint32_t)(val1);
  AJ_CancelTimer(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StartService(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint8_t arg4 ;
  uint16_t arg5 ;
  char *arg6 = (char *) 0 ;
  uint32_t arg7 ;
  AJ_SessionOpts *arg8 = (AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  unsigned long val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StartService.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_StartService" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_StartService" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_StartService" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_StartService" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AJ_StartService" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = (uint16_t)(val5);
  res6 = SWIG_AsCharPtrAndSize(args[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "AJ_StartService" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = (char *)(buf6);
  ecode7 = SWIG_AsVal_unsigned_SS_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AJ_StartService" "', argument " "7"" of type '" "uint32_t""'");
  } 
  arg7 = (uint32_t)(val7);
  res8 = SWIG_ConvertPtr(args[7], &argp8,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "AJ_StartService" "', argument " "8"" of type '" "AJ_SessionOpts const *""'"); 
  }
  arg8 = (AJ_SessionOpts *)(argp8);
  result = (AJ_Status)AJ_StartService(arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7,(_AJ_SessionOpts const *)arg8);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StartClient(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint8_t arg4 ;
  char *arg5 = (char *) 0 ;
  uint16_t arg6 ;
  uint32_t *arg7 = (uint32_t *) 0 ;
  AJ_SessionOpts *arg8 = (AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  uint32_t temp7 ;
  int res7 = SWIG_TMPOBJ ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StartClient.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_StartClient" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_StartClient" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_StartClient" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_StartClient" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  res5 = SWIG_AsCharPtrAndSize(args[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AJ_StartClient" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AJ_StartClient" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = (uint16_t)(val6);
  arg7 = &temp7;
  res8 = SWIG_ConvertPtr(args[7], &argp8,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "AJ_StartClient" "', argument " "8"" of type '" "AJ_SessionOpts const *""'"); 
  }
  arg8 = (AJ_SessionOpts *)(argp8);
  result = (AJ_Status)AJ_StartClient(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(_AJ_SessionOpts const *)arg8);
  jsresult = SWIG_From_int((int)(result));
  if (SWIG_IsTmpObj(res7)) {
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_From_long((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_uint32_t, new_flags));
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StartClientByName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint8_t arg4 ;
  char *arg5 = (char *) 0 ;
  uint16_t arg6 ;
  uint32_t *arg7 = (uint32_t *) 0 ;
  AJ_SessionOpts *arg8 = (AJ_SessionOpts *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  uint32_t temp7 ;
  int res7 = SWIG_TMPOBJ ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StartClientByName.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_StartClientByName" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_StartClientByName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_StartClientByName" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_StartClientByName" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  res5 = SWIG_AsCharPtrAndSize(args[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AJ_StartClientByName" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AJ_StartClientByName" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = (uint16_t)(val6);
  arg7 = &temp7;
  res8 = SWIG_ConvertPtr(args[7], &argp8,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "AJ_StartClientByName" "', argument " "8"" of type '" "AJ_SessionOpts const *""'"); 
  }
  arg8 = (AJ_SessionOpts *)(argp8);
  res9 = SWIG_AsCharPtrAndSize(args[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "AJ_StartClientByName" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = (char *)(buf9);
  result = (AJ_Status)AJ_StartClientByName(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(_AJ_SessionOpts const *)arg8,arg9);
  jsresult = SWIG_From_int((int)(result));
  if (SWIG_IsTmpObj(res7)) {
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_From_long((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_uint32_t, new_flags));
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  
  
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AJ_StartClientByInterface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  AJ_BusAttachment *arg1 = (AJ_BusAttachment *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint8_t arg4 ;
  char **arg5 = (char **) 0 ;
  uint32_t *arg6 = (uint32_t *) 0 ;
  char *arg7 = (char *) 0 ;
  AJ_SessionOpts *arg8 = (AJ_SessionOpts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = SWIG_TMPOBJ ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  AJ_Status result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AJ_StartClientByInterface.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p__AJ_BusAttachment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AJ_StartClientByInterface" "', argument " "1"" of type '" "AJ_BusAttachment *""'"); 
  }
  arg1 = (AJ_BusAttachment *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AJ_StartClientByInterface" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AJ_StartClientByInterface" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = (uint32_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AJ_StartClientByInterface" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  res5 = SWIG_ConvertPtr(args[4], &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AJ_StartClientByInterface" "', argument " "5"" of type '" "char const **""'"); 
  }
  arg5 = (char **)(argp5);
  arg6 = &temp6;
  res7 = SWIG_AsCharPtrAndSize(args[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "AJ_StartClientByInterface" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = (char *)(buf7);
  res8 = SWIG_ConvertPtr(args[7], &argp8,SWIGTYPE_p__AJ_SessionOpts, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "AJ_StartClientByInterface" "', argument " "8"" of type '" "AJ_SessionOpts const *""'"); 
  }
  arg8 = (AJ_SessionOpts *)(argp8);
  result = (AJ_Status)AJ_StartClientByInterface(arg1,(char const *)arg2,arg3,arg4,(char const **)arg5,arg6,arg7,(_AJ_SessionOpts const *)arg8);
  jsresult = SWIG_From_int((int)(result));
  if (SWIG_IsTmpObj(res6)) {
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_From_long((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    jsresult = SWIGV8_AppendOutput(jsresult, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_uint32_t, new_flags));
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_AJ_MemberType = {"_p_AJ_MemberType", "enum AJ_MemberType *|AJ_MemberType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AJ_ObjectIterator = {"_p_AJ_ObjectIterator", "AJ_ObjectIterator *|p_AJ_ObjectIterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AJ_Service = {"_p_AJ_Service", "AJ_Service *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AJ_Status = {"_p_AJ_Status", "enum AJ_Status *|AJ_Status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AllJoynConfiguration = {"_p_AllJoynConfiguration", "AllJoynConfiguration *|p_AllJoynConfiguration", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MessageHandlerEntry = {"_p_MessageHandlerEntry", "MessageHandlerEntry *|p_MessageHandlerEntry", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropHandlerEntry = {"_p_PropHandlerEntry", "PropHandlerEntry *|p_PropHandlerEntry", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_Arg = {"_p__AJ_Arg", "_AJ_Arg *|AJ_Arg *|p__AJ_Arg", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_BusAttachment = {"_p__AJ_BusAttachment", "p__AJ_BusAttachment|_AJ_BusAttachment *|AJ_BusAttachment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_Credential = {"_p__AJ_Credential", "_AJ_Credential *|p__AJ_Credential|AJ_Credential *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_IOBuffer = {"_p__AJ_IOBuffer", "_AJ_IOBuffer *|p__AJ_IOBuffer|AJ_IOBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_MCastSocket = {"_p__AJ_MCastSocket", "_AJ_MCastSocket *|p__AJ_MCastSocket|AJ_MCastSocket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_Message = {"_p__AJ_Message", "p__AJ_Message|_AJ_Message *|AJ_Message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_MsgHeader = {"_p__AJ_MsgHeader", "p__AJ_MsgHeader|_AJ_MsgHeader *|AJ_MsgHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_NetSocket = {"_p__AJ_NetSocket", "_AJ_NetSocket *|p__AJ_NetSocket|AJ_NetSocket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_Object = {"_p__AJ_Object", "_AJ_Object *|AJ_Object *|p__AJ_Object", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_SessionOpts = {"_p__AJ_SessionOpts", "_AJ_SessionOpts *|AJ_SessionOpts *|p__AJ_SessionOpts", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__AJ_Time = {"_p__AJ_Time", "p__AJ_Time|_AJ_Time *|AJ_Time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p__AJ_Message__uint8_t = {"_p_f_p__AJ_Message__uint8_t", "AcceptSessionHandler|uint8_t (*)(_AJ_Message *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p__AJ_Message_p__AJ_Message__AJ_Status = {"_p_f_p__AJ_Message_p__AJ_Message__AJ_Status", "MessageHandler|enum AJ_Status (*)(_AJ_Message *,_AJ_Message *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p__AJ_Message_p_q_const__char__AJ_Status = {"_p_f_p__AJ_Message_p_q_const__char__AJ_Status", "enum AJ_Status (*)(_AJ_Message *,char const *)|AJ_AboutPropGetter", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p__AJ_Message_uint32_t_p_void__AJ_Status = {"_p_f_p__AJ_Message_uint32_t_p_void__AJ_Status", "enum AJ_Status (*)(_AJ_Message *,uint32_t,void *)|AJ_BusPropGetCallback|AJ_BusPropSetCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__void_enum_AJ_Status__void = {"_p_f_p_q_const__void_enum_AJ_Status__void", "void (*)(void const *,enum AJ_Status)|AJ_BusAuthPeerCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_uint8_t_uint32_t__uint32_t = {"_p_f_p_uint8_t_uint32_t__uint32_t", "AJ_AuthPwdFunc|BusAuthPwdFunc|uint32_t (*)(uint8_t *,uint32_t)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "TimeoutHandler|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_uint32_t_p_q_const__char__p_char = {"_p_f_uint32_t_p_q_const__char__p_char", "char *(*)(uint32_t,char const *)|AJ_DescriptionLookupFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status = {"_p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status", "AJ_AuthListenerFunc|enum AJ_Status (*)(uint32_t,uint32_t,_AJ_Credential *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_uint8_t__void = {"_p_f_uint8_t__void", "ConnectionHandler|void (*)(uint8_t)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_t = {"_p_int8_t", "int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_char = {"_p_p_p_char", "char ***|AJ_InterfaceDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *|AJ_SessionId *|AJ_DebugLevel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AJ_MemberType,
  &_swigt__p_AJ_ObjectIterator,
  &_swigt__p_AJ_Service,
  &_swigt__p_AJ_Status,
  &_swigt__p_AllJoynConfiguration,
  &_swigt__p_MessageHandlerEntry,
  &_swigt__p_PropHandlerEntry,
  &_swigt__p__AJ_Arg,
  &_swigt__p__AJ_BusAttachment,
  &_swigt__p__AJ_Credential,
  &_swigt__p__AJ_IOBuffer,
  &_swigt__p__AJ_MCastSocket,
  &_swigt__p__AJ_Message,
  &_swigt__p__AJ_MsgHeader,
  &_swigt__p__AJ_NetSocket,
  &_swigt__p__AJ_Object,
  &_swigt__p__AJ_SessionOpts,
  &_swigt__p__AJ_Time,
  &_swigt__p_char,
  &_swigt__p_f_p__AJ_Message__uint8_t,
  &_swigt__p_f_p__AJ_Message_p__AJ_Message__AJ_Status,
  &_swigt__p_f_p__AJ_Message_p_q_const__char__AJ_Status,
  &_swigt__p_f_p__AJ_Message_uint32_t_p_void__AJ_Status,
  &_swigt__p_f_p_q_const__void_enum_AJ_Status__void,
  &_swigt__p_f_p_uint8_t_uint32_t__uint32_t,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_uint32_t_p_q_const__char__p_char,
  &_swigt__p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status,
  &_swigt__p_f_uint8_t__void,
  &_swigt__p_int32_t,
  &_swigt__p_int8_t,
  &_swigt__p_p_char,
  &_swigt__p_p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_size_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_t,
  &_swigt__p_uint8_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_AJ_MemberType[] = {  {&_swigt__p_AJ_MemberType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AJ_ObjectIterator[] = {  {&_swigt__p_AJ_ObjectIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AJ_Service[] = {  {&_swigt__p_AJ_Service, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AJ_Status[] = {  {&_swigt__p_AJ_Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AllJoynConfiguration[] = {  {&_swigt__p_AllJoynConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MessageHandlerEntry[] = {  {&_swigt__p_MessageHandlerEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropHandlerEntry[] = {  {&_swigt__p_PropHandlerEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_Arg[] = {  {&_swigt__p__AJ_Arg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_BusAttachment[] = {  {&_swigt__p__AJ_BusAttachment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_Credential[] = {  {&_swigt__p__AJ_Credential, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_IOBuffer[] = {  {&_swigt__p__AJ_IOBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_MCastSocket[] = {  {&_swigt__p__AJ_MCastSocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_Message[] = {  {&_swigt__p__AJ_Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_MsgHeader[] = {  {&_swigt__p__AJ_MsgHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_NetSocket[] = {  {&_swigt__p__AJ_NetSocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_Object[] = {  {&_swigt__p__AJ_Object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_SessionOpts[] = {  {&_swigt__p__AJ_SessionOpts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__AJ_Time[] = {  {&_swigt__p__AJ_Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p__AJ_Message__uint8_t[] = {  {&_swigt__p_f_p__AJ_Message__uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p__AJ_Message_p__AJ_Message__AJ_Status[] = {  {&_swigt__p_f_p__AJ_Message_p__AJ_Message__AJ_Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p__AJ_Message_p_q_const__char__AJ_Status[] = {  {&_swigt__p_f_p__AJ_Message_p_q_const__char__AJ_Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p__AJ_Message_uint32_t_p_void__AJ_Status[] = {  {&_swigt__p_f_p__AJ_Message_uint32_t_p_void__AJ_Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__void_enum_AJ_Status__void[] = {  {&_swigt__p_f_p_q_const__void_enum_AJ_Status__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_uint8_t_uint32_t__uint32_t[] = {  {&_swigt__p_f_p_uint8_t_uint32_t__uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_uint32_t_p_q_const__char__p_char[] = {  {&_swigt__p_f_uint32_t_p_q_const__char__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status[] = {  {&_swigt__p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_uint8_t__void[] = {  {&_swigt__p_f_uint8_t__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_t[] = {  {&_swigt__p_int8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_char[] = {  {&_swigt__p_p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AJ_MemberType,
  _swigc__p_AJ_ObjectIterator,
  _swigc__p_AJ_Service,
  _swigc__p_AJ_Status,
  _swigc__p_AllJoynConfiguration,
  _swigc__p_MessageHandlerEntry,
  _swigc__p_PropHandlerEntry,
  _swigc__p__AJ_Arg,
  _swigc__p__AJ_BusAttachment,
  _swigc__p__AJ_Credential,
  _swigc__p__AJ_IOBuffer,
  _swigc__p__AJ_MCastSocket,
  _swigc__p__AJ_Message,
  _swigc__p__AJ_MsgHeader,
  _swigc__p__AJ_NetSocket,
  _swigc__p__AJ_Object,
  _swigc__p__AJ_SessionOpts,
  _swigc__p__AJ_Time,
  _swigc__p_char,
  _swigc__p_f_p__AJ_Message__uint8_t,
  _swigc__p_f_p__AJ_Message_p__AJ_Message__AJ_Status,
  _swigc__p_f_p__AJ_Message_p_q_const__char__AJ_Status,
  _swigc__p_f_p__AJ_Message_uint32_t_p_void__AJ_Status,
  _swigc__p_f_p_q_const__void_enum_AJ_Status__void,
  _swigc__p_f_p_uint8_t_uint32_t__uint32_t,
  _swigc__p_f_p_void__void,
  _swigc__p_f_uint32_t_p_q_const__char__p_char,
  _swigc__p_f_uint32_t_uint32_t_p__AJ_Credential__AJ_Status,
  _swigc__p_f_uint8_t__void,
  _swigc__p_int32_t,
  _swigc__p_int8_t,
  _swigc__p_p_char,
  _swigc__p_p_p_char,
  _swigc__p_p_void,
  _swigc__p_size_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64_t,
  _swigc__p_uint8_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_AJ_IOBuffer, Type: p__AJ_IOBuffer, Dtor: _wrap_delete_AJ_IOBuffer */
v8::Handle<v8::FunctionTemplate> _exports_AJ_IOBuffer_class = SWIGV8_CreateClassTemplate("_exports_AJ_IOBuffer");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_IOBuffer_clientData.class_templ, _exports_AJ_IOBuffer_class);
_exports_AJ_IOBuffer_clientData.dtor = _wrap_delete_AJ_IOBuffer;
if (SWIGTYPE_p__AJ_IOBuffer->clientdata == 0) {
  SWIGTYPE_p__AJ_IOBuffer->clientdata = &_exports_AJ_IOBuffer_clientData;
}
/* Name: _exports_AJ_NetSocket, Type: p__AJ_NetSocket, Dtor: _wrap_delete_AJ_NetSocket */
v8::Handle<v8::FunctionTemplate> _exports_AJ_NetSocket_class = SWIGV8_CreateClassTemplate("_exports_AJ_NetSocket");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_NetSocket_clientData.class_templ, _exports_AJ_NetSocket_class);
_exports_AJ_NetSocket_clientData.dtor = _wrap_delete_AJ_NetSocket;
if (SWIGTYPE_p__AJ_NetSocket->clientdata == 0) {
  SWIGTYPE_p__AJ_NetSocket->clientdata = &_exports_AJ_NetSocket_clientData;
}
/* Name: _exports_AJ_MCastSocket, Type: p__AJ_MCastSocket, Dtor: _wrap_delete_AJ_MCastSocket */
v8::Handle<v8::FunctionTemplate> _exports_AJ_MCastSocket_class = SWIGV8_CreateClassTemplate("_exports_AJ_MCastSocket");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_MCastSocket_clientData.class_templ, _exports_AJ_MCastSocket_class);
_exports_AJ_MCastSocket_clientData.dtor = _wrap_delete_AJ_MCastSocket;
if (SWIGTYPE_p__AJ_MCastSocket->clientdata == 0) {
  SWIGTYPE_p__AJ_MCastSocket->clientdata = &_exports_AJ_MCastSocket_clientData;
}
/* Name: _exports_AJ_Time, Type: p__AJ_Time, Dtor: _wrap_delete_AJ_Time */
v8::Handle<v8::FunctionTemplate> _exports_AJ_Time_class = SWIGV8_CreateClassTemplate("_exports_AJ_Time");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_Time_clientData.class_templ, _exports_AJ_Time_class);
_exports_AJ_Time_clientData.dtor = _wrap_delete_AJ_Time;
if (SWIGTYPE_p__AJ_Time->clientdata == 0) {
  SWIGTYPE_p__AJ_Time->clientdata = &_exports_AJ_Time_clientData;
}
/* Name: _exports_AJ_Credential, Type: p__AJ_Credential, Dtor: _wrap_delete_AJ_Credential */
v8::Handle<v8::FunctionTemplate> _exports_AJ_Credential_class = SWIGV8_CreateClassTemplate("_exports_AJ_Credential");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_Credential_clientData.class_templ, _exports_AJ_Credential_class);
_exports_AJ_Credential_clientData.dtor = _wrap_delete_AJ_Credential;
if (SWIGTYPE_p__AJ_Credential->clientdata == 0) {
  SWIGTYPE_p__AJ_Credential->clientdata = &_exports_AJ_Credential_clientData;
}
/* Name: _exports_AJ_BusAttachment, Type: p__AJ_BusAttachment, Dtor: _wrap_delete_AJ_BusAttachment */
v8::Handle<v8::FunctionTemplate> _exports_AJ_BusAttachment_class = SWIGV8_CreateClassTemplate("_exports_AJ_BusAttachment");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_BusAttachment_clientData.class_templ, _exports_AJ_BusAttachment_class);
_exports_AJ_BusAttachment_clientData.dtor = _wrap_delete_AJ_BusAttachment;
if (SWIGTYPE_p__AJ_BusAttachment->clientdata == 0) {
  SWIGTYPE_p__AJ_BusAttachment->clientdata = &_exports_AJ_BusAttachment_clientData;
}
/* Name: _exports_AJ_SessionOpts, Type: p__AJ_SessionOpts, Dtor: _wrap_delete_AJ_SessionOpts */
v8::Handle<v8::FunctionTemplate> _exports_AJ_SessionOpts_class = SWIGV8_CreateClassTemplate("_exports_AJ_SessionOpts");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_SessionOpts_clientData.class_templ, _exports_AJ_SessionOpts_class);
_exports_AJ_SessionOpts_clientData.dtor = _wrap_delete_AJ_SessionOpts;
if (SWIGTYPE_p__AJ_SessionOpts->clientdata == 0) {
  SWIGTYPE_p__AJ_SessionOpts->clientdata = &_exports_AJ_SessionOpts_clientData;
}
/* Name: _exports__AJ_Arg, Type: p__AJ_Arg, Dtor: _wrap_delete__AJ_Arg */
v8::Handle<v8::FunctionTemplate> _exports__AJ_Arg_class = SWIGV8_CreateClassTemplate("_exports__AJ_Arg");
SWIGV8_SET_CLASS_TEMPL(_exports__AJ_Arg_clientData.class_templ, _exports__AJ_Arg_class);
_exports__AJ_Arg_clientData.dtor = _wrap_delete__AJ_Arg;
if (SWIGTYPE_p__AJ_Arg->clientdata == 0) {
  SWIGTYPE_p__AJ_Arg->clientdata = &_exports__AJ_Arg_clientData;
}
/* Name: _exports_AJ_MsgHeader, Type: p__AJ_MsgHeader, Dtor: _wrap_delete_AJ_MsgHeader */
v8::Handle<v8::FunctionTemplate> _exports_AJ_MsgHeader_class = SWIGV8_CreateClassTemplate("_exports_AJ_MsgHeader");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_MsgHeader_clientData.class_templ, _exports_AJ_MsgHeader_class);
_exports_AJ_MsgHeader_clientData.dtor = _wrap_delete_AJ_MsgHeader;
if (SWIGTYPE_p__AJ_MsgHeader->clientdata == 0) {
  SWIGTYPE_p__AJ_MsgHeader->clientdata = &_exports_AJ_MsgHeader_clientData;
}
/* Name: _exports__AJ_Message, Type: p__AJ_Message, Dtor: _wrap_delete__AJ_Message */
v8::Handle<v8::FunctionTemplate> _exports__AJ_Message_class = SWIGV8_CreateClassTemplate("_exports__AJ_Message");
SWIGV8_SET_CLASS_TEMPL(_exports__AJ_Message_clientData.class_templ, _exports__AJ_Message_class);
_exports__AJ_Message_clientData.dtor = _wrap_delete__AJ_Message;
if (SWIGTYPE_p__AJ_Message->clientdata == 0) {
  SWIGTYPE_p__AJ_Message->clientdata = &_exports__AJ_Message_clientData;
}
/* Name: _exports_AJ_Object, Type: p__AJ_Object, Dtor: _wrap_delete_AJ_Object */
v8::Handle<v8::FunctionTemplate> _exports_AJ_Object_class = SWIGV8_CreateClassTemplate("_exports_AJ_Object");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_Object_clientData.class_templ, _exports_AJ_Object_class);
_exports_AJ_Object_clientData.dtor = _wrap_delete_AJ_Object;
if (SWIGTYPE_p__AJ_Object->clientdata == 0) {
  SWIGTYPE_p__AJ_Object->clientdata = &_exports_AJ_Object_clientData;
}
/* Name: _exports_AJ_ObjectIterator, Type: p_AJ_ObjectIterator, Dtor: _wrap_delete_AJ_ObjectIterator */
v8::Handle<v8::FunctionTemplate> _exports_AJ_ObjectIterator_class = SWIGV8_CreateClassTemplate("_exports_AJ_ObjectIterator");
SWIGV8_SET_CLASS_TEMPL(_exports_AJ_ObjectIterator_clientData.class_templ, _exports_AJ_ObjectIterator_class);
_exports_AJ_ObjectIterator_clientData.dtor = _wrap_delete_AJ_ObjectIterator;
if (SWIGTYPE_p_AJ_ObjectIterator->clientdata == 0) {
  SWIGTYPE_p_AJ_ObjectIterator->clientdata = &_exports_AJ_ObjectIterator_clientData;
}
/* Name: _exports_MessageHandlerEntry, Type: p_MessageHandlerEntry, Dtor: _wrap_delete_MessageHandlerEntry */
v8::Handle<v8::FunctionTemplate> _exports_MessageHandlerEntry_class = SWIGV8_CreateClassTemplate("_exports_MessageHandlerEntry");
SWIGV8_SET_CLASS_TEMPL(_exports_MessageHandlerEntry_clientData.class_templ, _exports_MessageHandlerEntry_class);
_exports_MessageHandlerEntry_clientData.dtor = _wrap_delete_MessageHandlerEntry;
if (SWIGTYPE_p_MessageHandlerEntry->clientdata == 0) {
  SWIGTYPE_p_MessageHandlerEntry->clientdata = &_exports_MessageHandlerEntry_clientData;
}
/* Name: _exports_PropHandlerEntry, Type: p_PropHandlerEntry, Dtor: _wrap_delete_PropHandlerEntry */
v8::Handle<v8::FunctionTemplate> _exports_PropHandlerEntry_class = SWIGV8_CreateClassTemplate("_exports_PropHandlerEntry");
SWIGV8_SET_CLASS_TEMPL(_exports_PropHandlerEntry_clientData.class_templ, _exports_PropHandlerEntry_class);
_exports_PropHandlerEntry_clientData.dtor = _wrap_delete_PropHandlerEntry;
if (SWIGTYPE_p_PropHandlerEntry->clientdata == 0) {
  SWIGTYPE_p_PropHandlerEntry->clientdata = &_exports_PropHandlerEntry_clientData;
}
/* Name: _exports_AllJoynConfiguration, Type: p_AllJoynConfiguration, Dtor: _wrap_delete_AllJoynConfiguration */
v8::Handle<v8::FunctionTemplate> _exports_AllJoynConfiguration_class = SWIGV8_CreateClassTemplate("_exports_AllJoynConfiguration");
SWIGV8_SET_CLASS_TEMPL(_exports_AllJoynConfiguration_clientData.class_templ, _exports_AllJoynConfiguration_class);
_exports_AllJoynConfiguration_clientData.dtor = _wrap_delete_AllJoynConfiguration;
if (SWIGTYPE_p_AllJoynConfiguration->clientdata == 0) {
  SWIGTYPE_p_AllJoynConfiguration->clientdata = &_exports_AllJoynConfiguration_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddStaticVariable(exports_obj, "TRUE", _wrap_TRUE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "FALSE", _wrap_FALSE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "HOST_IS_LITTLE_ENDIAN", _wrap_HOST_IS_LITTLE_ENDIAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "HOST_IS_BIG_ENDIAN", _wrap_HOST_IS_BIG_ENDIAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "dbgINIT", _wrap_dbgINIT_get, _wrap_dbgINIT_set);
SWIGV8_AddStaticVariable(exports_obj, "dbgNET", _wrap_dbgNET_get, _wrap_dbgNET_set);
SWIGV8_AddStaticVariable(exports_obj, "dbgTARGET_UTIL", _wrap_dbgTARGET_UTIL_get, _wrap_dbgTARGET_UTIL_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OK", _wrap_AJ_OK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_NULL", _wrap_AJ_ERR_NULL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_UNEXPECTED", _wrap_AJ_ERR_UNEXPECTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_INVALID", _wrap_AJ_ERR_INVALID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_IO_BUFFER", _wrap_AJ_ERR_IO_BUFFER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_READ", _wrap_AJ_ERR_READ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_WRITE", _wrap_AJ_ERR_WRITE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_TIMEOUT", _wrap_AJ_ERR_TIMEOUT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_MARSHAL", _wrap_AJ_ERR_MARSHAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_UNMARSHAL", _wrap_AJ_ERR_UNMARSHAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_END_OF_DATA", _wrap_AJ_ERR_END_OF_DATA, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_RESOURCES", _wrap_AJ_ERR_RESOURCES, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_NO_MORE", _wrap_AJ_ERR_NO_MORE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_SECURITY", _wrap_AJ_ERR_SECURITY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_CONNECT", _wrap_AJ_ERR_CONNECT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_UNKNOWN", _wrap_AJ_ERR_UNKNOWN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_NO_MATCH", _wrap_AJ_ERR_NO_MATCH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_SIGNATURE", _wrap_AJ_ERR_SIGNATURE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_DISALLOWED", _wrap_AJ_ERR_DISALLOWED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_FAILURE", _wrap_AJ_ERR_FAILURE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_RESTART", _wrap_AJ_ERR_RESTART, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_LINK_TIMEOUT", _wrap_AJ_ERR_LINK_TIMEOUT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_DRIVER", _wrap_AJ_ERR_DRIVER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_OBJECT_PATH", _wrap_AJ_ERR_OBJECT_PATH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_BUSY", _wrap_AJ_ERR_BUSY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_DHCP", _wrap_AJ_ERR_DHCP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_ACCESS", _wrap_AJ_ERR_ACCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_SESSION_LOST", _wrap_AJ_ERR_SESSION_LOST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_LINK_DEAD", _wrap_AJ_ERR_LINK_DEAD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_HDR_CORRUPT", _wrap_AJ_ERR_HDR_CORRUPT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_RESTART_APP", _wrap_AJ_ERR_RESTART_APP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_INTERRUPTED", _wrap_AJ_ERR_INTERRUPTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_REJECTED", _wrap_AJ_ERR_REJECTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_RANGE", _wrap_AJ_ERR_RANGE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_ACCESS_ROUTING_NODE", _wrap_AJ_ERR_ACCESS_ROUTING_NODE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_KEY_EXPIRED", _wrap_AJ_ERR_KEY_EXPIRED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_SPI_NO_SPACE", _wrap_AJ_ERR_SPI_NO_SPACE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_SPI_READ", _wrap_AJ_ERR_SPI_READ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_SPI_WRITE", _wrap_AJ_ERR_SPI_WRITE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_OLD_VERSION", _wrap_AJ_ERR_OLD_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_NVRAM_READ", _wrap_AJ_ERR_NVRAM_READ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ERR_NVRAM_WRITE", _wrap_AJ_ERR_NVRAM_WRITE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_STATUS_LAST", _wrap_AJ_STATUS_LAST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_IO_BUF_RX", _wrap_AJ_IO_BUF_RX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_IO_BUF_TX", _wrap_AJ_IO_BUF_TX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_IO_BUF_AJ", _wrap_AJ_IO_BUF_AJ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_IO_BUF_MDNS", _wrap_AJ_IO_BUF_MDNS, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_AJ_IOBuffer_class, "direction", _wrap_AJ_IOBuffer_direction_get, _wrap_AJ_IOBuffer_direction_set);
SWIGV8_AddMemberVariable(_exports_AJ_IOBuffer_class, "flags", _wrap_AJ_IOBuffer_flags_get, _wrap_AJ_IOBuffer_flags_set);
SWIGV8_AddMemberVariable(_exports_AJ_IOBuffer_class, "bufSize", _wrap_AJ_IOBuffer_bufSize_get, _wrap_AJ_IOBuffer_bufSize_set);
SWIGV8_AddMemberVariable(_exports_AJ_IOBuffer_class, "bufStart", _wrap_AJ_IOBuffer_bufStart_get, _wrap_AJ_IOBuffer_bufStart_set);
SWIGV8_AddMemberVariable(_exports_AJ_IOBuffer_class, "readPtr", _wrap_AJ_IOBuffer_readPtr_get, _wrap_AJ_IOBuffer_readPtr_set);
SWIGV8_AddMemberVariable(_exports_AJ_IOBuffer_class, "writePtr", _wrap_AJ_IOBuffer_writePtr_get, _wrap_AJ_IOBuffer_writePtr_set);
SWIGV8_AddMemberVariable(_exports_AJ_IOBuffer_class, "context", _wrap_AJ_IOBuffer_context_get, _wrap_AJ_IOBuffer_context_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ADDR_IPV4", _wrap_AJ_ADDR_IPV4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ADDR_IPV6", _wrap_AJ_ADDR_IPV6, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_AJ_NetSocket_class, "tx", _wrap_AJ_NetSocket_tx_get, _wrap_AJ_NetSocket_tx_set);
SWIGV8_AddMemberVariable(_exports_AJ_NetSocket_class, "rx", _wrap_AJ_NetSocket_rx_get, _wrap_AJ_NetSocket_rx_set);
SWIGV8_AddMemberVariable(_exports_AJ_MCastSocket_class, "tx", _wrap_AJ_MCastSocket_tx_get, _wrap_AJ_MCastSocket_tx_set);
SWIGV8_AddMemberVariable(_exports_AJ_MCastSocket_class, "rx", _wrap_AJ_MCastSocket_rx_get, _wrap_AJ_MCastSocket_rx_set);
SWIGV8_AddMemberVariable(_exports_AJ_Time_class, "milliseconds", _wrap_AJ_Time_milliseconds_get, _wrap_AJ_Time_milliseconds_set);
SWIGV8_AddMemberVariable(_exports_AJ_Time_class, "seconds", _wrap_AJ_Time_seconds_get, _wrap_AJ_Time_seconds_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TIMER_FOREVER", _wrap_AJ_TIMER_FOREVER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CRED_PRV_KEY", _wrap_AJ_CRED_PRV_KEY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CRED_PUB_KEY", _wrap_AJ_CRED_PUB_KEY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CRED_CERT_CHAIN", _wrap_AJ_CRED_CERT_CHAIN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CRED_CERT_TRUST", _wrap_AJ_CRED_CERT_TRUST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CRED_CERT_ROOT", _wrap_AJ_CRED_CERT_ROOT, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_AJ_Credential_class, "mask", _wrap_AJ_Credential_mask_get, _wrap_AJ_Credential_mask_set);
SWIGV8_AddMemberVariable(_exports_AJ_Credential_class, "expiration", _wrap_AJ_Credential_expiration_get, _wrap_AJ_Credential_expiration_set);
SWIGV8_AddMemberVariable(_exports_AJ_Credential_class, "data", _wrap_AJ_Credential_data_get, _wrap_AJ_Credential_data_set);
SWIGV8_AddMemberVariable(_exports_AJ_Credential_class, "len", _wrap_AJ_Credential_len_get, _wrap_AJ_Credential_len_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "aboutPort", _wrap_AJ_BusAttachment_aboutPort_get, _wrap_AJ_BusAttachment_aboutPort_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "uniqueName", _wrap_AJ_BusAttachment_uniqueName_get, _wrap_AJ_BusAttachment_uniqueName_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "sock", _wrap_AJ_BusAttachment_sock_get, _wrap_AJ_BusAttachment_sock_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "serial", _wrap_AJ_BusAttachment_serial_get, _wrap_AJ_BusAttachment_serial_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "pwdCallback", _wrap_AJ_BusAttachment_pwdCallback_get, _wrap_AJ_BusAttachment_pwdCallback_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "authListenerCallback", _wrap_AJ_BusAttachment_authListenerCallback_get, _wrap_AJ_BusAttachment_authListenerCallback_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "suites", _wrap_AJ_BusAttachment_suites_get, _wrap_AJ_BusAttachment_suites_set);
SWIGV8_AddMemberVariable(_exports_AJ_BusAttachment_class, "numsuites", _wrap_AJ_BusAttachment_numsuites_get, _wrap_AJ_BusAttachment_numsuites_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_NAME_REQ_ALLOW_REPLACEMENT", _wrap_AJ_NAME_REQ_ALLOW_REPLACEMENT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_NAME_REQ_REPLACE_EXISTING", _wrap_AJ_NAME_REQ_REPLACE_EXISTING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_NAME_REQ_DO_NOT_QUEUE", _wrap_AJ_NAME_REQ_DO_NOT_QUEUE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_NONE", _wrap_AJ_TRANSPORT_NONE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_ALL", _wrap_AJ_TRANSPORT_ALL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_LOCAL", _wrap_AJ_TRANSPORT_LOCAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_BLUETOOTH", _wrap_AJ_TRANSPORT_BLUETOOTH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_WLAN", _wrap_AJ_TRANSPORT_WLAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_WWAN", _wrap_AJ_TRANSPORT_WWAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_LAN", _wrap_AJ_TRANSPORT_LAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_TCP", _wrap_AJ_TRANSPORT_TCP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_UDP", _wrap_AJ_TRANSPORT_UDP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_IP", _wrap_AJ_TRANSPORT_IP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_TRANSPORT_ANY", _wrap_AJ_TRANSPORT_ANY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BUS_START_ADVERTISING", _wrap_AJ_BUS_START_ADVERTISING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BUS_STOP_ADVERTISING", _wrap_AJ_BUS_STOP_ADVERTISING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BUS_START_FINDING", _wrap_AJ_BUS_START_FINDING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BUS_STOP_FINDING", _wrap_AJ_BUS_STOP_FINDING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FIND_NAME_STARTED", _wrap_AJ_FIND_NAME_STARTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FIND_NAME_ALREADY", _wrap_AJ_FIND_NAME_ALREADY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FIND_NAME_FAILURE", _wrap_AJ_FIND_NAME_FAILURE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SESSION_PROXIMITY_ANY", _wrap_AJ_SESSION_PROXIMITY_ANY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SESSION_PROXIMITY_PHYSICAL", _wrap_AJ_SESSION_PROXIMITY_PHYSICAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SESSION_PROXIMITY_NETWORK", _wrap_AJ_SESSION_PROXIMITY_NETWORK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SESSION_TRAFFIC_MESSAGES", _wrap_AJ_SESSION_TRAFFIC_MESSAGES, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SESSION_TRAFFIC_RAW_UNRELIABLE", _wrap_AJ_SESSION_TRAFFIC_RAW_UNRELIABLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SESSION_TRAFFIC_RAW_RELIABLE", _wrap_AJ_SESSION_TRAFFIC_RAW_RELIABLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SESSION_PORT_ANY", _wrap_AJ_SESSION_PORT_ANY, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_AJ_SessionOpts_class, "traffic", _wrap_AJ_SessionOpts_traffic_get, _wrap_AJ_SessionOpts_traffic_set);
SWIGV8_AddMemberVariable(_exports_AJ_SessionOpts_class, "proximity", _wrap_AJ_SessionOpts_proximity_get, _wrap_AJ_SessionOpts_proximity_set);
SWIGV8_AddMemberVariable(_exports_AJ_SessionOpts_class, "transports", _wrap_AJ_SessionOpts_transports_get, _wrap_AJ_SessionOpts_transports_set);
SWIGV8_AddMemberVariable(_exports_AJ_SessionOpts_class, "isMultipoint", _wrap_AJ_SessionOpts_isMultipoint_get, _wrap_AJ_SessionOpts_isMultipoint_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CANCELSESSIONLESS_REPLY_SUCCESS", _wrap_AJ_CANCELSESSIONLESS_REPLY_SUCCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CANCELSESSIONLESS_REPLY_NO_SUCH_MSG", _wrap_AJ_CANCELSESSIONLESS_REPLY_NO_SUCH_MSG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CANCELSESSIONLESS_REPLY_NOT_ALLOWED", _wrap_AJ_CANCELSESSIONLESS_REPLY_NOT_ALLOWED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_CANCELSESSIONLESS_REPLY_FAILED", _wrap_AJ_CANCELSESSIONLESS_REPLY_FAILED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BUS_SIGNAL_ALLOW", _wrap_AJ_BUS_SIGNAL_ALLOW, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BUS_SIGNAL_DENY", _wrap_AJ_BUS_SIGNAL_DENY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SETLINKTIMEOUT_SUCCESS", _wrap_AJ_SETLINKTIMEOUT_SUCCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SETLINKTIMEOUT_NO_DEST_SUPPORT", _wrap_AJ_SETLINKTIMEOUT_NO_DEST_SUPPORT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SETLINKTIMEOUT_NO_SESSION", _wrap_AJ_SETLINKTIMEOUT_NO_SESSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SETLINKTIMEOUT_FAILED", _wrap_AJ_SETLINKTIMEOUT_FAILED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PING_SUCCESS", _wrap_AJ_PING_SUCCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PING_FAILED", _wrap_AJ_PING_FAILED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PING_TIMEOUT", _wrap_AJ_PING_TIMEOUT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_INVALID", _wrap_AJ_ARG_INVALID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_ARRAY", _wrap_AJ_ARG_ARRAY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_BOOLEAN", _wrap_AJ_ARG_BOOLEAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_DOUBLE", _wrap_AJ_ARG_DOUBLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_SIGNATURE", _wrap_AJ_ARG_SIGNATURE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_HANDLE", _wrap_AJ_ARG_HANDLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_INT32", _wrap_AJ_ARG_INT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_INT16", _wrap_AJ_ARG_INT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_OBJ_PATH", _wrap_AJ_ARG_OBJ_PATH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_UINT16", _wrap_AJ_ARG_UINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_STRING", _wrap_AJ_ARG_STRING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_UINT64", _wrap_AJ_ARG_UINT64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_UINT32", _wrap_AJ_ARG_UINT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_VARIANT", _wrap_AJ_ARG_VARIANT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_INT64", _wrap_AJ_ARG_INT64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_BYTE", _wrap_AJ_ARG_BYTE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_STRUCT", _wrap_AJ_ARG_STRUCT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARG_DICT_ENTRY", _wrap_AJ_ARG_DICT_ENTRY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ARRAY_FLAG", _wrap_AJ_ARRAY_FLAG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_LITTLE_ENDIAN", _wrap_AJ_LITTLE_ENDIAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BIG_ENDIAN", _wrap_AJ_BIG_ENDIAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_NATIVE_ENDIAN", _wrap_AJ_NATIVE_ENDIAN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_NO_FLAGS", _wrap_AJ_NO_FLAGS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FLAG_NO_REPLY_EXPECTED", _wrap_AJ_FLAG_NO_REPLY_EXPECTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FLAG_AUTO_START", _wrap_AJ_FLAG_AUTO_START, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FLAG_ALLOW_REMOTE_MSG", _wrap_AJ_FLAG_ALLOW_REMOTE_MSG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FLAG_SESSIONLESS", _wrap_AJ_FLAG_SESSIONLESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FLAG_GLOBAL_BROADCAST", _wrap_AJ_FLAG_GLOBAL_BROADCAST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FLAG_COMPRESSED", _wrap_AJ_FLAG_COMPRESSED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_FLAG_ENCRYPTED", _wrap_AJ_FLAG_ENCRYPTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ALLJOYN_FLAG_SESSIONLESS", _wrap_ALLJOYN_FLAG_SESSIONLESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_MAJOR_PROTOCOL_VERSION", _wrap_AJ_MAJOR_PROTOCOL_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_MSG_INVALID", _wrap_AJ_MSG_INVALID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_MSG_METHOD_CALL", _wrap_AJ_MSG_METHOD_CALL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_MSG_METHOD_RET", _wrap_AJ_MSG_METHOD_RET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_MSG_ERROR", _wrap_AJ_MSG_ERROR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_MSG_SIGNAL", _wrap_AJ_MSG_SIGNAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_INVALID", _wrap_AJ_HDR_INVALID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_OBJ_PATH", _wrap_AJ_HDR_OBJ_PATH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_INTERFACE", _wrap_AJ_HDR_INTERFACE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_MEMBER", _wrap_AJ_HDR_MEMBER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_ERROR_NAME", _wrap_AJ_HDR_ERROR_NAME, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_REPLY_SERIAL", _wrap_AJ_HDR_REPLY_SERIAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_DESTINATION", _wrap_AJ_HDR_DESTINATION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_SENDER", _wrap_AJ_HDR_SENDER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_SIGNATURE", _wrap_AJ_HDR_SIGNATURE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_HANDLES", _wrap_AJ_HDR_HANDLES, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_TIMESTAMP", _wrap_AJ_HDR_TIMESTAMP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_TIME_TO_LIVE", _wrap_AJ_HDR_TIME_TO_LIVE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_COMPRESSION_TOKEN", _wrap_AJ_HDR_COMPRESSION_TOKEN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_HDR_SESSION_ID", _wrap_AJ_HDR_SESSION_ID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_MAX_SERVICE_NAME_SIZE", _wrap_AJ_MAX_SERVICE_NAME_SIZE, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports__AJ_Arg_class, "typeId", _wrap__AJ_Arg_typeId_get, _wrap__AJ_Arg_typeId_set);
SWIGV8_AddMemberVariable(_exports__AJ_Arg_class, "flags", _wrap__AJ_Arg_flags_get, _wrap__AJ_Arg_flags_set);
SWIGV8_AddMemberVariable(_exports__AJ_Arg_class, "len", _wrap__AJ_Arg_len_get, _wrap__AJ_Arg_len_set);
SWIGV8_AddMemberVariable(_exports__AJ_Arg_class, "sigPtr", _wrap__AJ_Arg_sigPtr_get, _wrap__AJ_Arg_sigPtr_set);
SWIGV8_AddMemberVariable(_exports__AJ_Arg_class, "container", _wrap__AJ_Arg_container_get, _wrap__AJ_Arg_container_set);
SWIGV8_AddMemberVariable(_exports_AJ_MsgHeader_class, "endianess", _wrap_AJ_MsgHeader_endianess_get, _wrap_AJ_MsgHeader_endianess_set);
SWIGV8_AddMemberVariable(_exports_AJ_MsgHeader_class, "msgType", _wrap_AJ_MsgHeader_msgType_get, _wrap_AJ_MsgHeader_msgType_set);
SWIGV8_AddMemberVariable(_exports_AJ_MsgHeader_class, "flags", _wrap_AJ_MsgHeader_flags_get, _wrap_AJ_MsgHeader_flags_set);
SWIGV8_AddMemberVariable(_exports_AJ_MsgHeader_class, "majorVersion", _wrap_AJ_MsgHeader_majorVersion_get, _wrap_AJ_MsgHeader_majorVersion_set);
SWIGV8_AddMemberVariable(_exports_AJ_MsgHeader_class, "bodyLen", _wrap_AJ_MsgHeader_bodyLen_get, _wrap_AJ_MsgHeader_bodyLen_set);
SWIGV8_AddMemberVariable(_exports_AJ_MsgHeader_class, "serialNum", _wrap_AJ_MsgHeader_serialNum_get, _wrap_AJ_MsgHeader_serialNum_set);
SWIGV8_AddMemberVariable(_exports_AJ_MsgHeader_class, "headerLen", _wrap_AJ_MsgHeader_headerLen_get, _wrap_AJ_MsgHeader_headerLen_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "msgId", _wrap__AJ_Message_msgId_get, _wrap__AJ_Message_msgId_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "hdr", _wrap__AJ_Message_hdr_get, _wrap__AJ_Message_hdr_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "iface", _wrap__AJ_Message_iface_get, _wrap__AJ_Message_iface_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "sender", _wrap__AJ_Message_sender_get, _wrap__AJ_Message_sender_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "destination", _wrap__AJ_Message_destination_get, _wrap__AJ_Message_destination_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "signature", _wrap__AJ_Message_signature_get, _wrap__AJ_Message_signature_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "sessionId", _wrap__AJ_Message_sessionId_get, _wrap__AJ_Message_sessionId_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "timestamp", _wrap__AJ_Message_timestamp_get, _wrap__AJ_Message_timestamp_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "ttl", _wrap__AJ_Message_ttl_get, _wrap__AJ_Message_ttl_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "sigOffset", _wrap__AJ_Message_sigOffset_get, _wrap__AJ_Message_sigOffset_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "varOffset", _wrap__AJ_Message_varOffset_get, _wrap__AJ_Message_varOffset_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "bodyBytes", _wrap__AJ_Message_bodyBytes_get, _wrap__AJ_Message_bodyBytes_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "bus", _wrap__AJ_Message_bus_get, _wrap__AJ_Message_bus_set);
SWIGV8_AddMemberVariable(_exports__AJ_Message_class, "outer", _wrap__AJ_Message_outer_get, _wrap__AJ_Message_outer_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DEBUG_OFF", _wrap_AJ_DEBUG_OFF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DEBUG_ERROR", _wrap_AJ_DEBUG_ERROR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DEBUG_WARN", _wrap_AJ_DEBUG_WARN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DEBUG_INFO", _wrap_AJ_DEBUG_INFO, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DEBUG_DUMP", _wrap_AJ_DEBUG_DUMP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DEBUG_ALL", _wrap_AJ_DEBUG_ALL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DEBUG_RESTRICT", _wrap_AJ_DEBUG_RESTRICT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_INVALID_MEMBER", _wrap_AJ_INVALID_MEMBER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_SIGNAL_MEMBER", _wrap_AJ_SIGNAL_MEMBER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_METHOD_MEMBER", _wrap_AJ_METHOD_MEMBER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PROPERTY_MEMBER", _wrap_AJ_PROPERTY_MEMBER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OBJ_FLAG_SECURE", _wrap_AJ_OBJ_FLAG_SECURE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OBJ_FLAG_HIDDEN", _wrap_AJ_OBJ_FLAG_HIDDEN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OBJ_FLAG_DISABLED", _wrap_AJ_OBJ_FLAG_DISABLED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OBJ_FLAG_ANNOUNCED", _wrap_AJ_OBJ_FLAG_ANNOUNCED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OBJ_FLAG_IS_PROXY", _wrap_AJ_OBJ_FLAG_IS_PROXY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OBJ_FLAG_DESCRIBED", _wrap_AJ_OBJ_FLAG_DESCRIBED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_OBJ_FLAGS_ALL_INCLUDE_MASK", _wrap_AJ_OBJ_FLAGS_ALL_INCLUDE_MASK, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_AJ_Object_class, "path", _wrap_AJ_Object_path_get, _wrap_AJ_Object_path_set);
SWIGV8_AddMemberVariable(_exports_AJ_Object_class, "interfaces", _wrap_AJ_Object_interfaces_get, _wrap_AJ_Object_interfaces_set);
SWIGV8_AddMemberVariable(_exports_AJ_Object_class, "flags", _wrap_AJ_Object_flags_get, _wrap_AJ_Object_flags_set);
SWIGV8_AddMemberVariable(_exports_AJ_Object_class, "context", _wrap_AJ_Object_context_get, _wrap_AJ_Object_context_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ROOT_OBJECT", _wrap_AJ_ROOT_OBJECT_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BUS_ID_FLAG", _wrap_AJ_BUS_ID_FLAG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_APP_ID_FLAG", _wrap_AJ_APP_ID_FLAG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PRX_ID_FLAG", _wrap_AJ_PRX_ID_FLAG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_REP_ID_FLAG", _wrap_AJ_REP_ID_FLAG, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_AJ_ObjectIterator_class, "fin", _wrap_AJ_ObjectIterator_fin_get, _wrap_AJ_ObjectIterator_fin_set);
SWIGV8_AddMemberVariable(_exports_AJ_ObjectIterator_class, "fex", _wrap_AJ_ObjectIterator_fex_get, _wrap_AJ_ObjectIterator_fex_set);
SWIGV8_AddMemberVariable(_exports_AJ_ObjectIterator_class, "l", _wrap_AJ_ObjectIterator_l_get, _wrap_AJ_ObjectIterator_l_set);
SWIGV8_AddMemberVariable(_exports_AJ_ObjectIterator_class, "n", _wrap_AJ_ObjectIterator_n_get, _wrap_AJ_ObjectIterator_n_set);
SWIGV8_AddStaticVariable(exports_obj, "AJ_INVALID_MSG_ID", _wrap_AJ_INVALID_MSG_ID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_INVALID_PROP_ID", _wrap_AJ_INVALID_PROP_ID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_DBusDestination", _wrap_AJ_DBusDestination_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_BusDestination", _wrap_AJ_BusDestination_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrSecurityViolation", _wrap_AJ_ErrSecurityViolation_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrTimeout", _wrap_AJ_ErrTimeout_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrRejected", _wrap_AJ_ErrRejected_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrResources", _wrap_AJ_ErrResources_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrServiceUnknown", _wrap_AJ_ErrServiceUnknown_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrUpdateNotAllowed", _wrap_AJ_ErrUpdateNotAllowed_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrInvalidValue", _wrap_AJ_ErrInvalidValue_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrFeatureNotAvailable", _wrap_AJ_ErrFeatureNotAvailable_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrMaxSizeExceeded", _wrap_AJ_ErrMaxSizeExceeded_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_ErrLanguageNotSuppored", _wrap_AJ_ErrLanguageNotSuppored_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PropertiesIface", _wrap_AJ_PropertiesIface_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DBusPeerInterface", _wrap_DBusPeerInterface_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PROP_GET", _wrap_AJ_PROP_GET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PROP_SET", _wrap_AJ_PROP_SET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_PROP_GET_ALL", _wrap_AJ_PROP_GET_ALL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_IntrospectionIface", _wrap_AJ_IntrospectionIface_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AllSeenIntrospectableInterface", _wrap_AllSeenIntrospectableInterface_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_AllSeenIntrospectionIface", _wrap_AJ_AllSeenIntrospectionIface_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_StandardObjects", _wrap_AJ_StandardObjects_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_SUCCESS", _wrap_AJ_JOINSESSION_REPLY_SUCCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_NO_SESSION", _wrap_AJ_JOINSESSION_REPLY_NO_SESSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_UNREACHABLE", _wrap_AJ_JOINSESSION_REPLY_UNREACHABLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_CONNECT_FAILED", _wrap_AJ_JOINSESSION_REPLY_CONNECT_FAILED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_REJECTED", _wrap_AJ_JOINSESSION_REPLY_REJECTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_BAD_SESSION_OPTS", _wrap_AJ_JOINSESSION_REPLY_BAD_SESSION_OPTS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_ALREADY_JOINED", _wrap_AJ_JOINSESSION_REPLY_ALREADY_JOINED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "AJ_JOINSESSION_REPLY_FAILED", _wrap_AJ_JOINSESSION_REPLY_FAILED, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_MessageHandlerEntry_class, "msgid", _wrap_MessageHandlerEntry_msgid_get, _wrap_MessageHandlerEntry_msgid_set);
SWIGV8_AddMemberVariable(_exports_MessageHandlerEntry_class, "handler", _wrap_MessageHandlerEntry_handler_get, _wrap_MessageHandlerEntry_handler_set);
SWIGV8_AddMemberVariable(_exports_PropHandlerEntry_class, "msgid", _wrap_PropHandlerEntry_msgid_get, _wrap_PropHandlerEntry_msgid_set);
SWIGV8_AddMemberVariable(_exports_PropHandlerEntry_class, "callback", _wrap_PropHandlerEntry_callback_get, _wrap_PropHandlerEntry_callback_set);
SWIGV8_AddMemberVariable(_exports_PropHandlerEntry_class, "context", _wrap_PropHandlerEntry_context_get, _wrap_PropHandlerEntry_context_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "daemonName", _wrap_AllJoynConfiguration_daemonName_get, _wrap_AllJoynConfiguration_daemonName_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "connect_timeout", _wrap_AllJoynConfiguration_connect_timeout_get, _wrap_AllJoynConfiguration_connect_timeout_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "connected", _wrap_AllJoynConfiguration_connected_get, _wrap_AllJoynConfiguration_connected_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "session_port", _wrap_AllJoynConfiguration_session_port_get, _wrap_AllJoynConfiguration_session_port_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "service_name", _wrap_AllJoynConfiguration_service_name_get, _wrap_AllJoynConfiguration_service_name_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "flags", _wrap_AllJoynConfiguration_flags_get, _wrap_AllJoynConfiguration_flags_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "opts", _wrap_AllJoynConfiguration_opts_get, _wrap_AllJoynConfiguration_opts_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "password_callback", _wrap_AllJoynConfiguration_password_callback_get, _wrap_AllJoynConfiguration_password_callback_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "link_timeout", _wrap_AllJoynConfiguration_link_timeout_get, _wrap_AllJoynConfiguration_link_timeout_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "acceptor", _wrap_AllJoynConfiguration_acceptor_get, _wrap_AllJoynConfiguration_acceptor_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "connection_handler", _wrap_AllJoynConfiguration_connection_handler_get, _wrap_AllJoynConfiguration_connection_handler_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "message_handlers", _wrap_AllJoynConfiguration_message_handlers_get, _wrap_AllJoynConfiguration_message_handlers_set);
SWIGV8_AddMemberVariable(_exports_AllJoynConfiguration_class, "prop_handlers", _wrap_AllJoynConfiguration_prop_handlers_get, _wrap_AllJoynConfiguration_prop_handlers_set);


  /* setup inheritances */
  

  /* class instances */
  /* Class: AJ_IOBuffer (_exports_AJ_IOBuffer) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_IOBuffer_class_0 = SWIGV8_CreateClassTemplate("AJ_IOBuffer");
_exports_AJ_IOBuffer_class_0->SetCallHandler(_wrap_new_AJ_IOBuffer);
_exports_AJ_IOBuffer_class_0->Inherit(_exports_AJ_IOBuffer_class);
_exports_AJ_IOBuffer_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_IOBuffer_obj = _exports_AJ_IOBuffer_class_0->GetFunction();
/* Class: AJ_NetSocket (_exports_AJ_NetSocket) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_NetSocket_class_0 = SWIGV8_CreateClassTemplate("AJ_NetSocket");
_exports_AJ_NetSocket_class_0->SetCallHandler(_wrap_new_AJ_NetSocket);
_exports_AJ_NetSocket_class_0->Inherit(_exports_AJ_NetSocket_class);
_exports_AJ_NetSocket_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_NetSocket_obj = _exports_AJ_NetSocket_class_0->GetFunction();
/* Class: AJ_MCastSocket (_exports_AJ_MCastSocket) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_MCastSocket_class_0 = SWIGV8_CreateClassTemplate("AJ_MCastSocket");
_exports_AJ_MCastSocket_class_0->SetCallHandler(_wrap_new_AJ_MCastSocket);
_exports_AJ_MCastSocket_class_0->Inherit(_exports_AJ_MCastSocket_class);
_exports_AJ_MCastSocket_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_MCastSocket_obj = _exports_AJ_MCastSocket_class_0->GetFunction();
/* Class: AJ_Time (_exports_AJ_Time) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_Time_class_0 = SWIGV8_CreateClassTemplate("AJ_Time");
_exports_AJ_Time_class_0->SetCallHandler(_wrap_new_AJ_Time);
_exports_AJ_Time_class_0->Inherit(_exports_AJ_Time_class);
_exports_AJ_Time_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_Time_obj = _exports_AJ_Time_class_0->GetFunction();
/* Class: AJ_Credential (_exports_AJ_Credential) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_Credential_class_0 = SWIGV8_CreateClassTemplate("AJ_Credential");
_exports_AJ_Credential_class_0->SetCallHandler(_wrap_new_AJ_Credential);
_exports_AJ_Credential_class_0->Inherit(_exports_AJ_Credential_class);
_exports_AJ_Credential_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_Credential_obj = _exports_AJ_Credential_class_0->GetFunction();
/* Class: AJ_BusAttachment (_exports_AJ_BusAttachment) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_BusAttachment_class_0 = SWIGV8_CreateClassTemplate("AJ_BusAttachment");
_exports_AJ_BusAttachment_class_0->SetCallHandler(_wrap_new_AJ_BusAttachment);
_exports_AJ_BusAttachment_class_0->Inherit(_exports_AJ_BusAttachment_class);
_exports_AJ_BusAttachment_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_BusAttachment_obj = _exports_AJ_BusAttachment_class_0->GetFunction();
/* Class: AJ_SessionOpts (_exports_AJ_SessionOpts) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_SessionOpts_class_0 = SWIGV8_CreateClassTemplate("AJ_SessionOpts");
_exports_AJ_SessionOpts_class_0->SetCallHandler(_wrap_new_AJ_SessionOpts);
_exports_AJ_SessionOpts_class_0->Inherit(_exports_AJ_SessionOpts_class);
_exports_AJ_SessionOpts_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_SessionOpts_obj = _exports_AJ_SessionOpts_class_0->GetFunction();
/* Class: _AJ_Arg (_exports__AJ_Arg) */
v8::Handle<v8::FunctionTemplate> _exports__AJ_Arg_class_0 = SWIGV8_CreateClassTemplate("_AJ_Arg");
_exports__AJ_Arg_class_0->SetCallHandler(_wrap_new__AJ_Arg);
_exports__AJ_Arg_class_0->Inherit(_exports__AJ_Arg_class);
_exports__AJ_Arg_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports__AJ_Arg_obj = _exports__AJ_Arg_class_0->GetFunction();
/* Class: AJ_MsgHeader (_exports_AJ_MsgHeader) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_MsgHeader_class_0 = SWIGV8_CreateClassTemplate("AJ_MsgHeader");
_exports_AJ_MsgHeader_class_0->SetCallHandler(_wrap_new_AJ_MsgHeader);
_exports_AJ_MsgHeader_class_0->Inherit(_exports_AJ_MsgHeader_class);
_exports_AJ_MsgHeader_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_MsgHeader_obj = _exports_AJ_MsgHeader_class_0->GetFunction();
/* Class: _AJ_Message (_exports__AJ_Message) */
v8::Handle<v8::FunctionTemplate> _exports__AJ_Message_class_0 = SWIGV8_CreateClassTemplate("_AJ_Message");
_exports__AJ_Message_class_0->SetCallHandler(_wrap_new__AJ_Message);
_exports__AJ_Message_class_0->Inherit(_exports__AJ_Message_class);
_exports__AJ_Message_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports__AJ_Message_obj = _exports__AJ_Message_class_0->GetFunction();
/* Class: AJ_Object (_exports_AJ_Object) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_Object_class_0 = SWIGV8_CreateClassTemplate("AJ_Object");
_exports_AJ_Object_class_0->SetCallHandler(_wrap_new_AJ_Object);
_exports_AJ_Object_class_0->Inherit(_exports_AJ_Object_class);
_exports_AJ_Object_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_Object_obj = _exports_AJ_Object_class_0->GetFunction();
/* Class: AJ_ObjectIterator (_exports_AJ_ObjectIterator) */
v8::Handle<v8::FunctionTemplate> _exports_AJ_ObjectIterator_class_0 = SWIGV8_CreateClassTemplate("AJ_ObjectIterator");
_exports_AJ_ObjectIterator_class_0->SetCallHandler(_wrap_new_AJ_ObjectIterator);
_exports_AJ_ObjectIterator_class_0->Inherit(_exports_AJ_ObjectIterator_class);
_exports_AJ_ObjectIterator_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AJ_ObjectIterator_obj = _exports_AJ_ObjectIterator_class_0->GetFunction();
/* Class: MessageHandlerEntry (_exports_MessageHandlerEntry) */
v8::Handle<v8::FunctionTemplate> _exports_MessageHandlerEntry_class_0 = SWIGV8_CreateClassTemplate("MessageHandlerEntry");
_exports_MessageHandlerEntry_class_0->SetCallHandler(_wrap_new_MessageHandlerEntry);
_exports_MessageHandlerEntry_class_0->Inherit(_exports_MessageHandlerEntry_class);
_exports_MessageHandlerEntry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_MessageHandlerEntry_obj = _exports_MessageHandlerEntry_class_0->GetFunction();
/* Class: PropHandlerEntry (_exports_PropHandlerEntry) */
v8::Handle<v8::FunctionTemplate> _exports_PropHandlerEntry_class_0 = SWIGV8_CreateClassTemplate("PropHandlerEntry");
_exports_PropHandlerEntry_class_0->SetCallHandler(_wrap_new_PropHandlerEntry);
_exports_PropHandlerEntry_class_0->Inherit(_exports_PropHandlerEntry_class);
_exports_PropHandlerEntry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PropHandlerEntry_obj = _exports_PropHandlerEntry_class_0->GetFunction();
/* Class: AllJoynConfiguration (_exports_AllJoynConfiguration) */
v8::Handle<v8::FunctionTemplate> _exports_AllJoynConfiguration_class_0 = SWIGV8_CreateClassTemplate("AllJoynConfiguration");
_exports_AllJoynConfiguration_class_0->SetCallHandler(_wrap_new_AllJoynConfiguration);
_exports_AllJoynConfiguration_class_0->Inherit(_exports_AllJoynConfiguration_class);
_exports_AllJoynConfiguration_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AllJoynConfiguration_obj = _exports_AllJoynConfiguration_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "AJ_IOBufInit", _wrap_AJ_IOBufInit);
SWIGV8_AddStaticFunction(exports_obj, "AJ_IOBufRebase", _wrap_AJ_IOBufRebase);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Net_Connect", _wrap_AJ_Net_Connect);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Net_Disconnect", _wrap_AJ_Net_Disconnect);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Net_Send", _wrap_AJ_Net_Send);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Net_Recv", _wrap_AJ_Net_Recv);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Net_MCastUp", _wrap_AJ_Net_MCastUp);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Net_MCastDown", _wrap_AJ_Net_MCastDown);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Net_Interrupt", _wrap_AJ_Net_Interrupt);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetLine", _wrap_AJ_GetLine);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetCmdLine", _wrap_AJ_GetCmdLine);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetVersion", _wrap_AJ_GetVersion);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetElapsedTime", _wrap_AJ_GetElapsedTime);
SWIGV8_AddStaticFunction(exports_obj, "_AJ_GetDebugTime", _wrap__AJ_GetDebugTime);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InitTimer", _wrap_AJ_InitTimer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetTimeDifference", _wrap_AJ_GetTimeDifference);
SWIGV8_AddStaticFunction(exports_obj, "AJ_TimeAddOffset", _wrap_AJ_TimeAddOffset);
SWIGV8_AddStaticFunction(exports_obj, "AJ_CompareTime", _wrap_AJ_CompareTime);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Sleep", _wrap_AJ_Sleep);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Malloc", _wrap_AJ_Malloc);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Realloc", _wrap_AJ_Realloc);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Free", _wrap_AJ_Free);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StringFindFirstOf", _wrap_AJ_StringFindFirstOf);
SWIGV8_AddStaticFunction(exports_obj, "AJ_RawToHex", _wrap_AJ_RawToHex);
SWIGV8_AddStaticFunction(exports_obj, "AJ_HexToRaw", _wrap_AJ_HexToRaw);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StartReadFromStdIn", _wrap_AJ_StartReadFromStdIn);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StopReadFromStdIn", _wrap_AJ_StopReadFromStdIn);
SWIGV8_AddStaticFunction(exports_obj, "AJ_RawToB64", _wrap_AJ_RawToB64);
SWIGV8_AddStaticFunction(exports_obj, "AJ_B64ToRaw", _wrap_AJ_B64ToRaw);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ByteSwap16", _wrap_AJ_ByteSwap16);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ByteSwap32", _wrap_AJ_ByteSwap32);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ByteSwap64", _wrap_AJ_ByteSwap64);
SWIGV8_AddStaticFunction(exports_obj, "AJ_IntToString", _wrap_AJ_IntToString);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InetToString", _wrap_AJ_InetToString);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetUniqueName", _wrap_AJ_GetUniqueName);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusRequestName", _wrap_AJ_BusRequestName);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusReleaseName", _wrap_AJ_BusReleaseName);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusAdvertiseName", _wrap_AJ_BusAdvertiseName);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusFindAdvertisedName", _wrap_AJ_BusFindAdvertisedName);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusFindAdvertisedNameByTransport", _wrap_AJ_BusFindAdvertisedNameByTransport);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusBindSessionPort", _wrap_AJ_BusBindSessionPort);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusUnbindSession", _wrap_AJ_BusUnbindSession);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusCancelSessionless", _wrap_AJ_BusCancelSessionless);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusReplyAcceptSession", _wrap_AJ_BusReplyAcceptSession);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusJoinSession", _wrap_AJ_BusJoinSession);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusLeaveSession", _wrap_AJ_BusLeaveSession);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusSetSignalRule", _wrap_AJ_BusSetSignalRule);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusSetSignalRuleSerial", _wrap_AJ_BusSetSignalRuleSerial);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusAddSignalRule", _wrap_AJ_BusAddSignalRule);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusSetSignalRuleFlags", _wrap_AJ_BusSetSignalRuleFlags);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusSetLinkTimeout", _wrap_AJ_BusSetLinkTimeout);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusRemoveSessionMember", _wrap_AJ_BusRemoveSessionMember);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusPing", _wrap_AJ_BusPing);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusHandleBusMessage", _wrap_AJ_BusHandleBusMessage);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusSetPasswordCallback", _wrap_AJ_BusSetPasswordCallback);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusSetAuthListenerCallback", _wrap_AJ_BusSetAuthListenerCallback);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusAuthenticatePeer", _wrap_AJ_BusAuthenticatePeer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusPropGet", _wrap_AJ_BusPropGet);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusPropGetAll", _wrap_AJ_BusPropGetAll);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusPropSet", _wrap_AJ_BusPropSet);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BusEnableSecurity", _wrap_AJ_BusEnableSecurity);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalMsg", _wrap_AJ_UnmarshalMsg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalArg", _wrap_AJ_UnmarshalArg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_SkipArg", _wrap_AJ_SkipArg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ResetArgs", _wrap_AJ_ResetArgs);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalArgs", _wrap_AJ_UnmarshalArgs);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalRaw", _wrap_AJ_UnmarshalRaw);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalContainer", _wrap_AJ_UnmarshalContainer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalCloseContainer", _wrap_AJ_UnmarshalCloseContainer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalVariant", _wrap_AJ_UnmarshalVariant);
SWIGV8_AddStaticFunction(exports_obj, "AJ_CloseMsg", _wrap_AJ_CloseMsg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalMethodCall", _wrap_AJ_MarshalMethodCall);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalSignal", _wrap_AJ_MarshalSignal);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalReplyMsg", _wrap_AJ_MarshalReplyMsg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalErrorMsg", _wrap_AJ_MarshalErrorMsg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalStatusMsg", _wrap_AJ_MarshalStatusMsg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_DeliverMsg", _wrap_AJ_DeliverMsg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_DeliverMsgPartial", _wrap_AJ_DeliverMsgPartial);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalArgs", _wrap_AJ_MarshalArgs);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InitArg", _wrap_AJ_InitArg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalArg", _wrap_AJ_MarshalArg);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalRaw", _wrap_AJ_MarshalRaw);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalContainer", _wrap_AJ_MarshalContainer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalCloseContainer", _wrap_AJ_MarshalCloseContainer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalVariant", _wrap_AJ_MarshalVariant);
SWIGV8_AddStaticFunction(exports_obj, "_AJ_DumpMsg", _wrap__AJ_DumpMsg);
SWIGV8_AddStaticFunction(exports_obj, "_AJ_DumpBytes", _wrap__AJ_DumpBytes);
SWIGV8_AddStaticFunction(exports_obj, "_AJ_DbgEnabled", _wrap__AJ_DbgEnabled);
SWIGV8_AddStaticFunction(exports_obj, "_AJ_DbgHeader", _wrap__AJ_DbgHeader);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StatusText", _wrap_AJ_StatusText);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Initialize", _wrap_AJ_Initialize);
SWIGV8_AddStaticFunction(exports_obj, "AJ_DESCRIPTION_ID", _wrap_AJ_DESCRIPTION_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_DESC_ID_FROM_MSG_ID", _wrap_AJ_DESC_ID_FROM_MSG_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_DESC_ID_FROM_PROP_ID", _wrap_AJ_DESC_ID_FROM_PROP_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_DESC_ID_FROM_OBJ_INDEX", _wrap_AJ_DESC_ID_FROM_OBJ_INDEX);
SWIGV8_AddStaticFunction(exports_obj, "AJ_DESC_ID_FROM_INTERFACE_INDEX", _wrap_AJ_DESC_ID_FROM_INTERFACE_INDEX);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BUS_MESSAGE_ID", _wrap_AJ_BUS_MESSAGE_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_APP_MESSAGE_ID", _wrap_AJ_APP_MESSAGE_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_PRX_MESSAGE_ID", _wrap_AJ_PRX_MESSAGE_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_BUS_PROPERTY_ID", _wrap_AJ_BUS_PROPERTY_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_APP_PROPERTY_ID", _wrap_AJ_APP_PROPERTY_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_PRX_PROPERTY_ID", _wrap_AJ_PRX_PROPERTY_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_REPLY_ID", _wrap_AJ_REPLY_ID);
SWIGV8_AddStaticFunction(exports_obj, "AJ_RegisterObjectList", _wrap_AJ_RegisterObjectList);
SWIGV8_AddStaticFunction(exports_obj, "AJ_RegisterObjectListWithDescriptions", _wrap_AJ_RegisterObjectListWithDescriptions);
SWIGV8_AddStaticFunction(exports_obj, "AJ_RegisterDescriptionLanguages", _wrap_AJ_RegisterDescriptionLanguages);
SWIGV8_AddStaticFunction(exports_obj, "AJ_RegisterObjects", _wrap_AJ_RegisterObjects);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InitObjectIterator", _wrap_AJ_InitObjectIterator);
SWIGV8_AddStaticFunction(exports_obj, "AJ_NextObject", _wrap_AJ_NextObject);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InterfacesCreate", _wrap_AJ_InterfacesCreate);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InterfacesAdd", _wrap_AJ_InterfacesAdd);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InterfacesDelete", _wrap_AJ_InterfacesDelete);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InterfaceDescriptionCreate", _wrap_AJ_InterfaceDescriptionCreate);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InterfaceDescriptionAdd", _wrap_AJ_InterfaceDescriptionAdd);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InterfaceDescriptionDelete", _wrap_AJ_InterfaceDescriptionDelete);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ObjectsCreate", _wrap_AJ_ObjectsCreate);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ObjectsAdd", _wrap_AJ_ObjectsAdd);
SWIGV8_AddStaticFunction(exports_obj, "AJ_IdentifyMessage", _wrap_AJ_IdentifyMessage);
SWIGV8_AddStaticFunction(exports_obj, "AJ_UnmarshalPropertyArgs", _wrap_AJ_UnmarshalPropertyArgs);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalPropertyArgs", _wrap_AJ_MarshalPropertyArgs);
SWIGV8_AddStaticFunction(exports_obj, "AJ_MarshalAllPropertiesArgs", _wrap_AJ_MarshalAllPropertiesArgs);
SWIGV8_AddStaticFunction(exports_obj, "AJ_HandleIntrospectRequest", _wrap_AJ_HandleIntrospectRequest);
SWIGV8_AddStaticFunction(exports_obj, "AJ_HandleGetDescriptionLanguages", _wrap_AJ_HandleGetDescriptionLanguages);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InitMessageFromMsgId", _wrap_AJ_InitMessageFromMsgId);
SWIGV8_AddStaticFunction(exports_obj, "AJ_SetProxyObjectPath", _wrap_AJ_SetProxyObjectPath);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AllocReplyContext", _wrap_AJ_AllocReplyContext);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ReleaseReplyContexts", _wrap_AJ_ReleaseReplyContexts);
SWIGV8_AddStaticFunction(exports_obj, "AJ_TimedOutMethodCall", _wrap_AJ_TimedOutMethodCall);
SWIGV8_AddStaticFunction(exports_obj, "AJ_ReleaseReplyContext", _wrap_AJ_ReleaseReplyContext);
SWIGV8_AddStaticFunction(exports_obj, "AJ_SetObjectFlags", _wrap_AJ_SetObjectFlags);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetMemberType", _wrap_AJ_GetMemberType);
SWIGV8_AddStaticFunction(exports_obj, "AJ_PrintXML", _wrap_AJ_PrintXML);
SWIGV8_AddStaticFunction(exports_obj, "AJ_PrintXMLWithDescriptions", _wrap_AJ_PrintXMLWithDescriptions);
SWIGV8_AddStaticFunction(exports_obj, "AJ_SetMinProtoVersion", _wrap_AJ_SetMinProtoVersion);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetMinProtoVersion", _wrap_AJ_GetMinProtoVersion);
SWIGV8_AddStaticFunction(exports_obj, "AJ_GetRoutingProtoVersion", _wrap_AJ_GetRoutingProtoVersion);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Authenticate", _wrap_AJ_Authenticate);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Connect", _wrap_AJ_Connect);
SWIGV8_AddStaticFunction(exports_obj, "AJ_FindBusAndConnect", _wrap_AJ_FindBusAndConnect);
SWIGV8_AddStaticFunction(exports_obj, "AJ_Disconnect", _wrap_AJ_Disconnect);
SWIGV8_AddStaticFunction(exports_obj, "SetBusAuthPwdCallback", _wrap_SetBusAuthPwdCallback);
SWIGV8_AddStaticFunction(exports_obj, "AJ_IsRoutingNodeBlacklisted", _wrap_AJ_IsRoutingNodeBlacklisted);
SWIGV8_AddStaticFunction(exports_obj, "AJ_InitRoutingNodeBlacklist", _wrap_AJ_InitRoutingNodeBlacklist);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutRegisterPropStoreGetter", _wrap_AJ_AboutRegisterPropStoreGetter);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutInit", _wrap_AJ_AboutInit);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutAnnounce", _wrap_AJ_AboutAnnounce);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutSetIcon", _wrap_AJ_AboutSetIcon);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutHandleGetProp", _wrap_AJ_AboutHandleGetProp);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutHandleGetAboutData", _wrap_AJ_AboutHandleGetAboutData);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutHandleGetObjectDescription", _wrap_AJ_AboutHandleGetObjectDescription);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutIconHandleGetProp", _wrap_AJ_AboutIconHandleGetProp);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutIconHandleGetURL", _wrap_AJ_AboutIconHandleGetURL);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutIconHandleGetContent", _wrap_AJ_AboutIconHandleGetContent);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutSetShouldAnnounce", _wrap_AJ_AboutSetShouldAnnounce);
SWIGV8_AddStaticFunction(exports_obj, "AJ_AboutSetAnnounceObjects", _wrap_AJ_AboutSetAnnounceObjects);
SWIGV8_AddStaticFunction(exports_obj, "AJ_RunAllJoynService", _wrap_AJ_RunAllJoynService);
SWIGV8_AddStaticFunction(exports_obj, "AJ_SetTimer", _wrap_AJ_SetTimer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_CancelTimer", _wrap_AJ_CancelTimer);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StartService", _wrap_AJ_StartService);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StartClient", _wrap_AJ_StartClient);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StartClientByName", _wrap_AJ_StartClientByName);
SWIGV8_AddStaticFunction(exports_obj, "AJ_StartClientByInterface", _wrap_AJ_StartClientByInterface);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_IOBuffer"), _exports_AJ_IOBuffer_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_NetSocket"), _exports_AJ_NetSocket_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_MCastSocket"), _exports_AJ_MCastSocket_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_Time"), _exports_AJ_Time_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_Credential"), _exports_AJ_Credential_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_BusAttachment"), _exports_AJ_BusAttachment_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_SessionOpts"), _exports_AJ_SessionOpts_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("_AJ_Arg"), _exports__AJ_Arg_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_MsgHeader"), _exports_AJ_MsgHeader_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("_AJ_Message"), _exports__AJ_Message_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_Object"), _exports_AJ_Object_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AJ_ObjectIterator"), _exports_AJ_ObjectIterator_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("MessageHandlerEntry"), _exports_MessageHandlerEntry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("PropHandlerEntry"), _exports_PropHandlerEntry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AllJoynConfiguration"), _exports_AllJoynConfiguration_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(alljoyn, alljoyn_initialize)
#endif
